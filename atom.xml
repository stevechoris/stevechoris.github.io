<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Choris Steve&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://stevechoris.github.io/"/>
  <updated>2017-04-02T06:56:57.000Z</updated>
  <id>http://stevechoris.github.io/</id>
  
  <author>
    <name>Choris Steve</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习和数据挖掘常用算法整理</title>
    <link href="http://stevechoris.github.io/2017/04/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%92%8C%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>http://stevechoris.github.io/2017/04/02/机器学习和数据挖掘常用算法整理/</id>
    <published>2017-04-02T05:18:59.000Z</published>
    <updated>2017-04-02T06:56:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;<a id="more"></a></p>
<blockquote>
<p>本文目录主要参考《机器学习实战》(Peter Harrington著) 一书。</p>
</blockquote>
<ul>
<li>[ ] 计算广告学</li>
<li>[ ] SVD、PCA、LDA</li>
</ul>
<h2 id="一-分类"><a href="#一-分类" class="headerlink" title="一 分类"></a>一 分类</h2><h3 id="naive-bayes"><a href="#Naive-Bayes" class="headerlink" title="Naive Bayes"></a>Naive Bayes</h3><p>$$P(A∩B)=P(A)<em>P(B|A)=P(B)</em>P(A|B) =&gt; $$<br>$$P(A|B)=P(B|A)<em>P(A)/P(B)$$<br>对于给出的待分类项，求解在此项出现的条件下各个目标类别出现的条件概率，哪个最大，就认为此待分类项属于哪个类别。<br>假设样本$x=(a_1,a_2,a_3,…a_n)$(特征独立)，分类目标$Y={y_1,y_2,y_3,y_4..y_n}$，通过$max(P(y_1|x),P(y_2|x),P(y_3|x)..P(y_n|x))$分类。<br>而根据贝叶斯公式：<br>$$P(y_i|x)=p(x|y_i)</em>P(y_i)/P(x) =&gt; max(P(x|y_i)<em>p(y_i))$$<br>$$P(x|y_i)</em>p(y_i)=p(y_i)*\prod{P(ai|y_i)}$$</p>
<h4 id="属性特征"><a href="#属性特征" class="headerlink" title="属性特征"></a>属性特征</h4><p>特征为离散值时直接统计即可（表示统计概率）<br>特征为连续值的时候假定特征符合高斯分布:g(x,n,u) p(ak|y_i)=g(xk,ni,ui)</p>
<h4 id="laplace校准拉普拉斯校验"><a href="#Laplace校准-拉普拉斯校验" class="headerlink" title="Laplace校准(拉普拉斯校验)"></a>Laplace校准(拉普拉斯校验)</h4><p>当某个类别下某个特征划分没有出现时，会有P(a|y)=0，就是导致分类器质量降低，所以此时引入Laplace校验，就是<strong>对每类别下所有划分的计数加1</strong>。</p>
<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>优点：模型所需估计的参数很少，具有<strong>稳定的计算效率</strong>，对<strong>小规模的数据表现很好</strong>。<strong>对缺失数据不敏感</strong>，<strong>适合多分类任务</strong>，<strong>适合增量式训练</strong>。<br>缺点：NBC前提是<strong>假设属性之间相互独立</strong>，但在实际应用中往往不满足。<br><a href="http://www.cnblogs.com/leoo2sk/archive/2010/09/17/naive-bayesian-classifier.html" target="_blank" rel="external">算法杂货铺——分类算法之朴素贝叶斯分类(Naive Bayesian classification)</a></p>
<h4 id="遇到特征之间不独立问题"><a href="#遇到特征之间不独立问题" class="headerlink" title="遇到特征之间不独立问题"></a>遇到特征之间不独立问题</h4><ul>
<li>[ ] 参考改进的贝叶斯网络，使用DAG来进行概率图的描述</li>
</ul>
<h3 id="logistic回归"><a href="#Logistic回归" class="headerlink" title="Logistic回归"></a>Logistic回归</h3><blockquote>
<p><a href="http://tech.meituan.com/intro_to_logistic_regression.html" target="_blank" rel="external">美团 - 逻辑回归简介</a></p>
</blockquote>
<p><img src="https://lh3.googleusercontent.com/-Cg4C45Qff2E/WOCLJsAlbEI/AAAAAAAAAZg/wC7V5IyR4js/I/Logistic%252520Regression.png" alt="Logistic Regression 模型简介 -"></p>
<h3 id="k-近邻算法"><a href="#k-近邻算法" class="headerlink" title="k-近邻算法"></a>k-近邻算法</h3><p>对预测数据，找到最近k个实例，根据k个实例的距离和属性获取预测值。</p>
<h4 id="1-三要素"><a href="#1-三要素：" class="headerlink" title="1 三要素："></a>1 三要素：</h4><p>距离的度量（常见的距离度量有欧式距离，马氏距离等）<br>k值的选择<br>分类决策规则 （多数表决规则）</p>
<h4 id="2-k值的选择"><a href="#2-k值的选择" class="headerlink" title="2 k值的选择"></a>2 k值的选择</h4><p>k值越小,模型越复杂，容易过拟合；k值越大，模型越简单，如k=N</p>
<blockquote>
<p>一般k会取一个较小的值，然后用过交叉验证来确定：将样本划分一部分出来为预测样本，比如95%训练，5%预测，然后k分别取1，2，3，4，5之类的，进行预测，计算最后的分类误差，选择误差最小的k</p>
</blockquote>
<h4 id="3-优缺点"><a href="#3-优缺点" class="headerlink" title="3 优缺点"></a>3 优缺点</h4><p>优点: <strong>思想简单，理论成熟</strong>，<strong>既可以用来做分类也可以用来做回归</strong>；<strong>可用于非线性分类</strong>；<strong>训练时间复杂度为O(n)</strong>；<strong>准确度高</strong>，对数据没有假设，<strong>对outlier不敏感</strong>；</p>
<p>缺点: <strong>计算量大</strong>；<strong>样本不平衡问题</strong>（即有些类别的样本数量很多，而其它样本的数量很少）;<strong>需要大量的内存</strong>；</p>
<h4 id="4-kd树"><a href="#4-KD树" class="headerlink" title="4 KD树"></a>4 KD树</h4><blockquote>
<p><a href="http://www.cnblogs.com/eyeszjwang/articles/2429382.html" target="_blank" rel="external">k-d tree算法</a></p>
</blockquote>
<p><img src="https://lh3.googleusercontent.com/-7RUNJ2dXRus/WOCLNnoL2pI/AAAAAAAAAZk/B8quAXwPYuI/I/k-d%252520tree.png" alt="k-d tree算法 - J_Outsider - 博客园-w1281">====</p>
<h5 id="kd树进行knn查找"><a href="#KD树进行KNN查找" class="headerlink" title="KD树进行KNN查找"></a>KD树进行KNN查找</h5><p>通过KD树的搜索找到与搜索目标最近的点，这样KNN的搜索就可以被限制在空间的局部区域上了，可以大大增加效率。</p>
<h5 id="kd树搜索的复杂度"><a href="#KD树搜索的复杂度" class="headerlink" title="KD树搜索的复杂度"></a>KD树搜索的复杂度</h5><p>当实例随机分布的时候，搜索的复杂度为log(N)，N为实例的个数<br>KD树更加适用于实例数量远大于空间维度的KNN搜索，如果实例的个数与空间维度差不多时，它的效率基于等于线性扫描。</p>
<h3 id="dt决策树"><a href="#DT决策树" class="headerlink" title="DT决策树"></a>DT决策树</h3><blockquote>
<p><a href="http://www.csuldw.com/2015/05/08/2015-05-08-decision%20tree/" target="_blank" rel="external">机器学习算法-决策树理论</a></p>
</blockquote>
<h4 id="id3"><a href="#ID3" class="headerlink" title="ID3"></a>ID3</h4><blockquote>
<p><strong>熵和信息增益</strong>的概念：</p>
</blockquote>
<p><img src="https://lh3.googleusercontent.com/-yCwYZzpxlXw/WM30Y8PypMI/AAAAAAAAAWw/WLu2pYAVurM/I/14882722983991.jpg" alt=""><br><img src="https://lh3.googleusercontent.com/-RaZ069NPE4w/WM30ZCj-mDI/AAAAAAAAAW0/RdOS7Jw85FI/I/14882719423416.jpg" alt=""></p>
<blockquote>
<p><strong>算法步骤</strong>：</p>
</blockquote>
<ol>
<li>针对当前的集合，计算每个特征的信息增益</li>
<li>然后选择信息增益最大的特征作为当前节点的决策特征</li>
<li>根据决策特征，把集合样本划分到不同的子节点</li>
<li>然后继续对每个子节点进行递归，直到每个集合只有一个类别</li>
</ol>
<blockquote>
<p><strong>信息熵：</strong><br><img src="https://lh3.googleusercontent.com/-bk50PuUgFoc/WOCLN25FeUI/AAAAAAAAAZo/TKWNetYSAQ0/I/14900671554970.jpg" alt=""><br><strong>整个属性的熵:</strong><br><img src="https://lh3.googleusercontent.com/-wnG3s7I5yyk/WOCLOE2kwZI/AAAAAAAAAZs/u67MecnzeVY/I/14900671777619.jpg" alt=""><br>为各个分支的比例与各自熵的加权求和<br><strong>信息增益:</strong><br><img src="https://lh3.googleusercontent.com/-woNzpZIHfZc/WOCLOfFj9nI/AAAAAAAAAZw/rZ2eKekgxQQ/I/14900672121660.jpg" alt=""><br>表示分类目标的熵减去当前属性的熵，增益越大，分类能力越强</p>
</blockquote>
<p>(这里前者叫做经验熵，表示数据集分类C的不确定性，后者就是经验条件熵，表示在给定A的条件下对数据集分类C的不确定性，两者相减叫做互信息，决策树的增益等价于互信息)</p>
<p>损失函数:<br>设树的叶子节点个数为T，t为其中一个叶子节点，该叶子节点有$N<em>t$个样本，其中k类的样本有$N</em>{t_k}$个，H(t)为叶子节点上的经验熵，则损失函数定义为<br>$$C<em>t(T)=\sum(Nt*H(t))+ \lambda|T|$$<br>其中$H(t)=\sum(\frac{N</em>{t_k}}{N<em>t}*log(\frac{N</em>{t_k}}{N_t}))$<br>代入可以得到$C_t(T)=\sum(N<em>t*\sum(N</em>{t<em>k}*log(\frac{N</em>{t_k}}{N_t}))+\lambda|T|$<br>最终有$C_t(T)=C(T)+ \lambda|T|$<br><strong>$\lambda|T|$为正则化项，$\lambda$是用于调节比率<br>决策树的生成只考虑了信息增益</strong></p>
<h4 id="c45"><a href="#C4-5" class="headerlink" title="C4.5"></a>C4.5</h4><blockquote>
<p>信息增益律的概念</p>
</blockquote>
<p><img src="https://lh3.googleusercontent.com/-iHwpYLsBBQA/WM30ZW_1FoI/AAAAAAAAAW4/YO7B3o7ciI0/I/14882720149994.jpg" alt=""></p>
<p>优缺点：<br>它是在ID3基础上的一个改进，<strong>准确率高</strong>，但是子构造树的过程中需要进行<strong>多次的扫描和排序</strong>，所以它的运算效率较低</p>
<h4 id="基尼指数gini-index"><a href="#基尼指数Gini-index" class="headerlink" title="基尼指数Gini index"></a>基尼指数Gini index</h4><p><strong>基尼指数主要在CART算法中用到，随机森林中用到的属性划分标准也是它</strong>。Gini index划分是二元的，它度量的是数据分区或训练元组集D的不纯度，表示的是一个随机选中的样本在子集中被分错的可能性。计算方式如下：</p>
<p>$$ Gini(D)=1−\Sigma p^2_i，其中，pi是D中元组数以Ci类的概率，对m个类计算和。$$</p>
<p>Gini指数越大，不纯度越大，越不容易区分。假设A有v个不同的值出现在特征D中，它的二元划分有$2^v−2$种（除去自己和空集）。当考虑二元划分裂时，计算每个结果分区的不纯度加权和。比如A有两个值，则特征D被划分成D1和D2,这时Gini指数为：</p>
<p>$$Gini_A(D) = \frac{D_1}{D} Gini(D_1) + \frac{D_2}{D} Gini(D_2)$$</p>
<p>上面的式子表示的是不确定性的大小。对于每个属性，考虑每种可能的二元划分，对于离散值属性，选择该属性产生最小Gini指数的自己作为它的分裂信息。</p>
<h3 id="adaboost元算法提高分类性能"><a href="#AdaBoost元算法提高分类性能" class="headerlink" title="AdaBoost元算法提高分类性能"></a>AdaBoost元算法提高分类性能</h3><blockquote>
<p>boosting是一种跟bagging很类似的技术。不论是在boosting还是bagging当中，<strong>所使用的多个分类器类型都是一致的</strong>。但是在前者当中，<strong>不同的分类器是通过串行训练而获得的，每个新分类器都根据已训练出的分类器的性能来进行训练</strong>。<strong>boosting是通过集中关注被已有分类器错分的那些数据来获得新的分类器</strong>。<br>由于boosting分类的结果是基于所有分类器的加权求和结果的，因此boosting与bagging不太一样。bagging中的分类器权重是相等的，而<strong>boosting中的分类器权重并不相等，每个权重代表的是对应分类器在上一轮迭代中的成功度</strong>。</p>
</blockquote>
<h4 id="集成算法ensemble-algorithms"><a href="#集成算法（Ensemble-algorithms）" class="headerlink" title="集成算法（Ensemble algorithms）"></a>集成算法（Ensemble algorithms）</h4><p>集成方法是由多个较弱的模型集成模型组，其中的模型可以单独进行训练，并且它们的预测能以某种方式结合起来去做出一个总体预测。</p>
<p>该算法主要的问题是要<strong>找出哪些较弱的模型可以结合起来</strong>，以及<strong>结合的方法</strong>。这是一个非常强大的技术集，因此广受欢迎。</p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ul>
<li>Bagging：Bootstrapped Aggregation）<ul>
<li>随机森林（Random Forest）</li>
</ul>
</li>
<li>Boosting：<ul>
<li>AdaBoost</li>
<li>梯度提升回归树（Gradient Boosted Regression Trees，GBRT）</li>
</ul>
</li>
</ul>
<h4 id="优缺点"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点：</strong>当先最先进的预测几乎都使用了算法集成。它比使用单个模型预测出来的结果要精确的多**</p>
<p><strong>缺点：</strong>需要大量的维护工作</p>
<h4 id="bagging"><a href="#Bagging" class="headerlink" title="Bagging"></a>Bagging</h4><ol>
<li>从N样本中有放回的采样N个样本</li>
<li>对这N个样本在全属性上建立分类器(CART,SVM)</li>
<li>重复上面(1,2)的步骤，建立m个分类器</li>
<li>预测的时候使用投票的方法得到结果</li>
</ol>
<h4 id="boosting"><a href="#Boosting" class="headerlink" title="Boosting"></a>Boosting</h4><p>boosting在训练的时候会给样本加一个权重，然后<strong>使loss function尽量去考虑那些分错类的样本</strong>（比如给分错类的样本的权重值加大），<strong>根据当前分类器在数据集上面的预测准确率，给当前分类器分配一个权重$\alpha$</strong>。</p>
<h4 id="adaboost"><a href="#AdaBoost" class="headerlink" title="AdaBoost"></a>AdaBoost</h4><blockquote>
<p>参考机器学习实战第七章</p>
</blockquote>
<p>能否使用弱分类器和多个实例来构建一个强分类器？这是一个非常有趣的理论问题。这里的“弱”意味着分类器的性能比随机猜测略好，但是也不会好太多。这就是说，在二分类情况下弱分类器的错误率会高于50%，而“强”分类器的错误率将会低很多。AdaBoost算法即脱胎于上述理论问题。</p>
<p>AdaBoost是adaptive boosting (自适应boosting）的缩写，其运行过程如下：训练数据中的每一个样本，并赋予其一个权重，这些权重构成了向量D。一开始，这些权重都初始化成相等值。首先在训练数据上训练出一个弱分类器并计算该分类器的错误率，然后在同一数据集上再次训练弱分类器。在分类器的第二次训练当中，将会重新调整每个样本的权重，其中第一次分队的样本的权重将会降低，而第一次分错的样本的权重将会提高。为了从所有弱分类器中得到最终的分类结果，AdaBoost为每个分类器都分配了一个权重alpha，这些alpha值是基于每个弱分类器的错误率进行计算的。其中，错误率$\varepsilon $的定义为：<br>    $$\varepsilon=\frac{未正确分类的样本数目}{所有样本数目} $$<br>而alpha的计算公式如下：<br>$$\alpha=\frac{1}{2}\ln{\frac{1-\varepsilon}{\varepsilon}}$$</p>
<blockquote>
<p>AdaBoost算法的流程如图所示：</p>
</blockquote>
<p><img src="https://lh3.googleusercontent.com/-vSW1_ZxSL9E/WM30ZtrOvAI/AAAAAAAAAW8/LsPeA_2OYBc/I/14898896114111.jpg" alt=""></p>
<p>计算出alpha值之后，可以对权重向量进行D进行更新，以使得那些正确分类的样本的权重降低而错分样本的权重升高。D的计算方法如下。<br>如果某个样本被正确分类，那么该样本的权重更改为：<br>$$D<em>{i}^{t+1}=\frac{D</em>{i}^{(t)}e^{-\alpha}}{Sum(D)}$$<br>而如果一个样本被错分，那么该样本的权重更改为：<br>$$D<em>{i}^{t+1}=\frac{D</em>{i}^{(t)}e^{\alpha}}{Sum(D)}$$<br>在计算出D之后，AdaBoost又开始进入下一轮迭代。AdaBoost算法会不断地重复训练和调整权重的过程，直到训练错误率为0或者分类器的树木达到用户的指定值为止。<br>下面学习一个基于单层决策树的AdaBoost算法代码，并绘制AdaBoost算法流程：</p>
<blockquote>
<p><strong>构建单层决策树伪代码：</strong></p>
</blockquote>
<p><img src="https://lh3.googleusercontent.com/-9nyxjA88V3k/WM30Z4Osv9I/AAAAAAAAAXA/nOGNvnocYNk/I/14898907114716.jpg" alt=""></p>
<blockquote>
<p><strong>构建单层决策树代码：</strong></p>
</blockquote>
<p><img src="https://lh3.googleusercontent.com/--zdAP7V8quo/WM30aQlBvvI/AAAAAAAAAXE/tkd5A9xxa_U/I/14898909643672.jpg" alt=""></p>
<blockquote>
<p><strong>完整AdaBoost伪代码：</strong></p>
</blockquote>
<p><img src="https://lh3.googleusercontent.com/-dtKFDZYm478/WM30aSqSsDI/AAAAAAAAAXI/19PRY5aqtoo/I/14898912014231.jpg" alt=""><br><img src="https://lh3.googleusercontent.com/-YbcQpi7Kq9A/WM30a9jmfWI/AAAAAAAAAXM/YLucouKio8E/I/14898912419811.jpg" alt=""></p>
<h3 id="gbdt"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h3><p><a href="http://blog.csdn.net/w28971023/article/details/8240756" target="_blank" rel="external">GBDT（MART） 迭代决策树入门教程 | 简介 - w28971023的专栏 - 博客频道 - CSDN.NET</a></p>
<p><img src="https://lh3.googleusercontent.com/-TE_b6LENoes/WOCLXUnfx-I/AAAAAAAAAZ0/UqtP0vygOHw/I/14900942558950.jpg" alt=""></p>
<h3 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h3><blockquote>
<p><strong>随机森林原理介绍：</strong></p>
</blockquote>
<p><img src="https://lh3.googleusercontent.com/-LkB4EfuBFJI/WOCLcVes8-I/AAAAAAAAAZ4/U9BqE7gO2vs/I/14900951336902.jpg" alt=""></p>
<h4 id="预测过程"><a href="#预测过程" class="headerlink" title="预测过程"></a>预测过程</h4><p>将预测样本输入到K颗树分别进行预测<br>如果是分类问题，直接使用投票的方式选择分类频次最高的类别<br>如果是回归问题，使用分类之后的均值作为结果</p>
<h4 id="参数问题"><a href="#参数问题" class="headerlink" title="参数问题"></a>参数问题</h4><ol>
<li>一般取m=sqrt(M)</li>
<li>关于树的个数K，一般都需要成百上千，但是也有具体的样本有关（比如特征数量）</li>
<li>树的最大深度，（太深可能可能导致过拟合？？）</li>
<li>节点上的最小样本数、最小信息增益</li>
</ol>
<h4 id="泛化误差估计"><a href="#泛化误差估计" class="headerlink" title="泛化误差估计"></a>泛化误差估计</h4><p>使用oob（out-of-bag）进行泛化误差的估计，将各个树的未采样样本作为预测样本（大约有36.8%），使用已经建立好的森林对各个预测样本进行预测，预测完之后最后统计误分得个数占总预测样本的比率作为RF的oob误分率。</p>
<h3 id="svm支持向量机"><a href="#SVM支持向量机" class="headerlink" title="SVM支持向量机"></a>SVM支持向量机</h3><blockquote>
<p>参考：</p>
<ol>
<li><a href="evernote:///view/233243447/s10/93142c01-7748-43c7-9c55-357f875bb3d9/93142c01-7748-43c7-9c55-357f875bb3d9/" target="_blank" rel="external">最优化理论与KTT条件</a><br><a href="evernote:///view/233243447/s10/2de548d8-89d7-46f6-accd-9631c2d52f92/2de548d8-89d7-46f6-accd-9631c2d52f92/" target="_blank" rel="external">2. 支持向量机：Duality</a></li>
</ol>
</blockquote>
<p><img src="https://lh3.googleusercontent.com/-TgVIrgo9MIg/WM30b-Nq7NI/AAAAAAAAAXQ/31EkQisMw2k/I/%25255BUNSET%25255D.jpg" alt="机器学习_周志华 第121 - 125页_页面_1_图像_0001"><br><img src="https://lh3.googleusercontent.com/-DsKnIcmHGX4/WM30cle5-jI/AAAAAAAAAXU/9F9GoVfJXOw/I/%25255BUNSET%25255D.jpg" alt="机器学习_周志华 第121 - 125页_页面_2_图像_0001"><br><img src="https://lh3.googleusercontent.com/-UFq0TtHhl2o/WM30doVh7ZI/AAAAAAAAAXY/U-t-9d_iY4s/I/%25255BUNSET%25255D.jpg" alt="机器学习_周志华 第121 - 125页_页面_3_图像_0001"><br><img src="https://lh3.googleusercontent.com/-E-L28ABwcag/WM30ejjDhfI/AAAAAAAAAXc/RIAHVO_GBj8/I/%25255BUNSET%25255D.jpg" alt="机器学习_周志华 第121 - 125页_页面_4_图像_0001"><br><img src="https://lh3.googleusercontent.com/-cER8MwQ6oak/WM30fo2pvRI/AAAAAAAAAXg/4HMNCFQO8PY/I/%25255BUNSET%25255D.jpg" alt="机器学习_周志华 第121 - 125页_页面_5_图像_0001"></p>
<h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><p>经验损失函数:$sigma(1-y_i(w*x_i+b))$ (注意，如果该值小于0时直接取0即可)<br>合页损失函数：$\sigma(1-y_i(wi+b)) + lambda||w||^2$ 后面的是L2正则项</p>
<h4 id="为什么要引入对偶算法"><a href="#为什么要引入对偶算法" class="headerlink" title="为什么要引入对偶算法"></a>为什么要引入对偶算法</h4><p><strong>对偶问题往往更加容易求解</strong>(结合拉格朗日和kkt条件)<br><strong>可以很自然的引用核函数</strong>（拉格朗日表达式里面有内积，而核函数也是通过内积进行映射的）</p>
<h4 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a>核函数</h4><p>将输入特征x（线性不可分）映射到高维特征R空间，可以在R空间上让SVM进行线性可以变，这就是核函数的作用<br>多项式核函数:$K(x,z)=(x*z+1)^p$<br>高斯核函数:$K(x,z)=exp(-(x-z)^2/a^2)$ a为均值<br>字符串核函数：好像用于文本匹配、检索之类的，不懂</p>
<h4 id="svm优缺点"><a href="#SVM优缺点" class="headerlink" title="SVM优缺点"></a>SVM优缺点</h4><blockquote>
<p><strong>优点：</strong></p>
</blockquote>
<p>使用核函数可以向高维空间进行映射<br>使用核函数可以解决非线性的分类<br>分类思想很简单，就是将样本与决策面的间隔最大化<br>分类效果较好</p>
<blockquote>
<p><strong>缺点：</strong></p>
</blockquote>
<p>对大规模数据训练比较困难，因为它是用二次规划来求解的<br>无法直接支持多分类，但是可以使用间接的方法来做</p>
<h4 id="smo"><a href="#SMO" class="headerlink" title="SMO"></a>SMO</h4><p>SMO是用于快速求解SVM的<br>它选择凸二次规划的两个变量，其他的变量保持不变，然后根据这两个变量构建一个二次规划问题，这个二次规划关于这两个变量解会更加的接近原始二次规划的解，通过这样的子问题划分可以大大增加整个算法的计算速度，关于这两个变量：<br>其中一个是严重违反KKT条件的一个变量<br>另一个变量是根据自由约束确定，好像是求剩余变量的最大化来确定的。</p>
<h4 id="svm多分类问题"><a href="#SVM多分类问题" class="headerlink" title="SVM多分类问题"></a>SVM多分类问题</h4><ol>
<li>直接法: 直接在目标函数上进行修改，将多个分类面的参数求解合并到一个最优化问题中，通过求解该优化就可以实现多分类（计算复杂度很高，实现起来较为困难）</li>
<li>间接法:<ul>
<li>一对多<br>其中某个类为一类，其余n-1个类为另一个类,这方式共需要训练n个分类器，最后在测试的时候将测试样本经过这4个分类器f1(x),f2(x),f3(x)和 f4(x),取其最大值为分类器(这种方式由于是1对M分类，会存在偏置，很不实用)</li>
<li>一对一(libsvm实现的方式)<br>任意两个类都训练一个分类器，那么n个类就需要n*(n-1)/2个svm分类器。在预测的将测试样 本通过这些分类器之后进行投票选择最终结果。（这种方法虽好，但是需要n*(n-1)/2个分类器代价太大，不过有好像使用循环图来进行改进）</li>
</ul>
</li>
</ol>
<h2 id="二-回归利用回归预测数值型数据"><a href="#二-回归：利用回归预测数值型数据" class="headerlink" title="二 回归：利用回归预测数值型数据"></a>二 回归：利用回归预测数值型数据</h2><h3 id="预测数值型数据回归"><a href="#预测数值型数据：回归" class="headerlink" title="预测数值型数据：回归"></a>预测数值型数据：回归</h3><h4 id="lr逻辑回归和线性回归"><a href="#LR逻辑回归和线性回归" class="headerlink" title="LR逻辑回归和线性回归"></a>LR逻辑回归和线性回归</h4><p>逻辑回归是一个线性的二分类模型，主要是计算在某个样本特征下事件发生的概率，比如根据用户的浏览购买情况作为特征来计算它是否会购买这个商品，抑或是它是否会点击这个商品。</p>
<p>由一个线性和函数与一个sigmod函数组成，训练LR就是训练线性和函数的各个权重值w。</p>
<p>一般使用最大似然法来估计，比如y_i=1的概率是pi,则y_i=0的概率是1-pi，那么观测概率为$p(y_i)=pi^y_i<em> (1-pi)^(1-y_i)$<br>最大似然函数为$（hw(x_i)^y_i</em>(1-hw(x_i))^(1-y_i)）$连乘，对这个似然函数取对数之后就会得到 的表达式<br>$L(w)=sigma(y_i<em>log(hw(x_i))-(1-y_i)log(1-hw(x_i)))=sigma(y_i</em>(w<em>x_i)- log(1+exp(w</em>x_i)))$<br>估计这个L(w)的极大值就可以得到w的估计值。<br>最大似然函数的最优化问题，通常采用随机梯度下降法和拟牛顿迭代法来进行优化</p>
<blockquote>
<p>hw为lr函数，y_i为二分类结果0或1，x_i为特征向量</p>
</blockquote>
<h4 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h4><p>如果$hw(x)=1/(1-e^(-w<em>x))$，<br>则$cost function=-1/m</em> sigma(y_i<em>log(hw(x_i)+(1-y_i)</em>log(1-hw(x_i)))=j(w)$<br>这里就成了就$min(j(w))$<br>所以更新w的过程为<br>$w:=w-lamea<em>j(w)’ (求导)$ =&gt; $w:=w-lamea</em> 1/m*sigma<a href="hw(x_i">m</a>-y_i)*x_i)$<br>直到j(w)不能再的时候停止</p>
<p>最大问题: 会陷入局部最优，并且每次在对当前样本计算cost的时候都需要去遍历全部样本才能得到cost值，这样计算速度就会慢很多（虽然在计算的时候可以转为矩阵乘法去更新整个w值）<br>所以现在好多框架（mahout）中一般使用随机梯度下降法，它在计算cost的时候只计算当前的代价，最终cost是在全部样本迭代一遍之求和得出，还有他在更新当前的参数w的时候并不是依次遍历样本，而是从所有的样本中随机选择一条进行计算，它方法收敛速度快（一般是使用最大迭代次数），并且还可以避免局部最优，并且还很容易并行（使用参数服务器的方式进行并行）<br>这里SGD可以改进的地方就是使用动态的梯度值alpha=0.04*(1.0+n+i)+Rate</p>
<h4 id="其他优化方法"><a href="#其他优化方法" class="headerlink" title="其他优化方法"></a>其他优化方法</h4><p>拟牛顿法（记得是需要使用Hessian矩阵和cholesky分解）<br>BFGS<br>L-BFGS</p>
<blockquote>
<p>优缺点：无需选择学习率α，更快，但是更复杂</p>
</blockquote>
<h4 id="过拟合问题"><a href="#过拟合问题" class="headerlink" title="过拟合问题"></a>过拟合问题</h4><ol>
<li>减少feature个数（人工定义留多少个feature、算法选取这些feature）</li>
<li>正则化（留下所有的feature，但对于部分feature定义其parameter非常小），在cost上加$lamea(sigma(w^2))$，同时w的更新变为$w:=w-rate<em> 1/m\</em>sigma<a href="hw(x_i">m</a>-y_i)<em>x_i+ （lamea/m)</em>w$。注意：这里的w0不受正则化影响</li>
</ol>
<h4 id="正则化算法regularization-algorithms"><a href="#正则化算法（Regularization-Algorithms）" class="headerlink" title="正则化算法（Regularization Algorithms）"></a>正则化算法（Regularization Algorithms）</h4><p>它是另一种方法（通常是回归方法）的拓展，这种方法会基于模型复杂性对其进行惩罚，它喜欢相对简单能够更好的泛化的模型。</p>
<h5 id="例子"><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><p>岭回归（Ridge Regression）<br>最小绝对收缩与选择算子（LASSO）<br>GLASSO<br>弹性网络（Elastic Net）<br>最小角回归（Least-Angle Regression）</p>
<h5 id="优缺点"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h5><p>其惩罚会减少过拟合<br>总会有解决方法</p>
<p>惩罚会造成欠拟合<br>很难校准</p>
<h4 id="多分类softmax"><a href="#多分类softmax" class="headerlink" title="多分类softmax"></a>多分类softmax</h4><p>softmax: 假设离散型随机变量Y的取值集合是{1,2,..,k},则多分类的LR为<br>$P(Y=a|x)=exp(wa<em>x)/(1-1到k求和(wk</em>x)) 1&lt;a&lt;k$<br>这里会输出当前样本下属于哪一类的概率，并且满足全部概率加起来=1</p>
<p>关于softmax和k个LR的选择</p>
<ol>
<li>类别之间是否互斥（比如音乐只能属于古典音乐、乡村音乐、摇滚月的一种），用softmax</li>
<li>类别之间有联系（比如一首歌曲可能有影视原声，也可能包含人声，或者是舞曲），用k个LR更为合适</li>
</ol>
<h4 id="优缺点"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h4><p>优点：实现简单；分类时计算量非常小，速度很快，存储资源低；<br>缺点：容易欠拟合，一般准确度不太高。只能处理两分类问题（在此基础上衍生出来的softmax可以用于多分类），且必须线性可分；<br><a href="http://www.cnblogs.com/biyeymyhjob/archive/2012/07/18/2595410.html" target="_blank" rel="external">Logistic Regression–逻辑回归算法汇总</a><br><a href="http://blog.csdn.net/abcjennifer/article/details/7716281" target="_blank" rel="external">Stanford机器学习—第三讲. 逻辑回归和过拟合问题的解决 logistic Regression &amp; Regularization</a><br><a href="http://ufldl.stanford.edu/wiki/index.php/Softmax%E5%9B%9E%E5%BD%92" target="_blank" rel="external">Softmax回归</a></p>
<h3 id="cart分类回归树"><a href="#Cart分类回归树" class="headerlink" title="Cart分类回归树"></a>Cart分类回归树</h3><p><img src="https://lh3.googleusercontent.com/-f7u4zKxY_1o/WM30f6tpViI/AAAAAAAAAXk/6vIBwhP9KXk/I/14882716973219.jpg" alt=""></p>
<blockquote>
<p>线性回归包含了一些强大的方法，但这些方法创建的模型<strong>需要拟合所有的样本点</strong>（局部加权线性回归除外）。当<strong>数据拥有众多特征并且特征之间关系十分复杂时</strong>，构建全局模型的想法就显得太难了，也略显笨拙。<br>一种可行的方法是<strong>将数据集切分成多份易建模的数据，然后利用线性回归技术建模</strong>。如果首次切分后仍然难以拟合线性模型就继续切分。<strong>在这种切分方式下，树结构和回归法就相当有用</strong>。</p>
</blockquote>
<p><strong>树回归优点：</strong>可以对复杂和非线性的数据建模<br><strong>缺点：</strong>结果不易理解<br><strong>适用数据类型：</strong>数值型和标称型数据</p>
<h4 id="1-与id3算法的比较"><a href="#1-与ID3算法的比较" class="headerlink" title="1 与ID3算法的比较"></a>1 与ID3算法的比较</h4><ul>
<li><strong>切分方式过于迅速：</strong>ID3的做法是<strong>每次选取当前最佳的特征来分割数据</strong>，并<strong>按照特征的所有可能取值来切分</strong>。也就是说，如果一个特征有4种取值，那么数据将被切成4份。一旦按某个特征切分后，<strong>该特征在之后的算法执行过程中将不会再起作用</strong>，所以有观点认为<strong>这种切分方式过于迅速</strong>。另外一种方法是<strong>二元切分法，即每次把数据集切成两份</strong>。<strong>如果数据的某特征值等于切分所要求的值，那么这些数据就进入树的左子树，反之则进入树的右子树</strong>。</li>
<li><strong>处理连续值特征：</strong>，<strong>ID3算法</strong>还存在另一个问题，它<strong>不能直接处理连续型特征值</strong>。只有事先将连续型特征转换成离散型，才能在ID3算法中使用。但<strong>这种转换过程会破坏连续型变量的内在性质</strong>。而使用<strong>二元切分法</strong>则易于对树构建过程进行调整以处理连续型特征。具体处理方法是：<strong>如果特征值大于给定值就走左子树，否则就走右子树</strong>。</li>
<li><strong>节省时间：</strong>二元切分法节省了树的构建时间。但这点意义也不是特别大，因为这些树构建一般是离线完成，时间并非需要重点关注的因素。</li>
</ul>
<h4 id="2-构建cart回归树"><a href="#2-构建CART回归树" class="headerlink" title="2 构建CART回归树"></a>2 构建CART回归树</h4><blockquote>
<p>回归树与分类树的思路类似，但也节点的数据类型不是离散型，而是连续型。</p>
</blockquote>
<p><strong>树节点存储结构：</strong></p>
<ul>
<li>待切分的特征</li>
<li>待切分的特征值</li>
<li>右子树。当不再需要切分的时候，也可以是单个值。</li>
<li>左子树。与右子树类似。</li>
</ul>
<p><strong>Pyton定义：</strong></p>
<p><img src="https://lh3.googleusercontent.com/-YLmLV0HjEMc/WM30gILNW_I/AAAAAAAAAXo/kLylOK833PY/I/14890615105039.jpg" alt=""></p>
<blockquote>
<p>后面将介绍两种树的构建：第一种是回归树（regression tree），其每个叶节点包含单个值；第二种是模型树（model tree），其每个也节点包含一个线性方程。</p>
</blockquote>
<p>先给出两种树构建算法中的一些共用代码。<br><strong>函数createTree()的伪代码大致如下：</strong></p>
<ul>
<li>找到最佳的待切分特征</li>
<li>如果该节点不能再分，将该节点存为叶节点</li>
<li>执行二元切分</li>
<li>在右子树调用createTree()方法</li>
<li>在左子树调用createTree()方法</li>
</ul>
<p><strong>binSplitDataSet切分函数和createTree创建树函数代码：</strong><br><img src="https://lh3.googleusercontent.com/-1btQAyvubmI/WM30gesiH6I/AAAAAAAAAXs/B_LQQB8Wlpw/I/14890624939031.jpg" alt=""></p>
<p>回归树中，假设叶节点是常数值，这种策略认为数据中的复杂关系可以用树结构来概括。那为成功构建以分段常数为叶节点的树，需要度量出数据的一致性。这里涉及到<strong>如何像分类树一样计算连续型数值的混乱度呢</strong>？实际的做法就是<strong>计算总方差</strong>。总方差可以通过均方差乘以数据集中样本点的个数来得到。</p>
<p><em><em>chooseBestSplit()函数</em></em><br>这个函数<strong>对于给定的某个误差计算方法</strong>，<strong>可以找到数据集上最佳的二元切分方式</strong>。另外，该函数<strong>还要确定什么时候停止切分</strong>，<strong>一旦停止切分会生成一个叶节点</strong>。因此，函数chooseBestSplit()只需完成两件事：<strong>用最佳方式切分数据集和生成相应的叶节点</strong>。</p>
<p><strong>伪代码：</strong></p>
<p><img src="https://lh3.googleusercontent.com/-434adCtUXN8/WM30gkvWsuI/AAAAAAAAAXw/HBGk6jNhV-Y/I/14890635236498.jpg" alt=""></p>
<p><strong>代码：</strong></p>
<p><img src="https://lh3.googleusercontent.com/-8Sth-Q22ln8/WM30hCvpHjI/AAAAAAAAAX0/D5_NPcjpBKs/I/14890639674352.jpg" alt=""></p>
<p>这样就可以构建一棵完整的回归树了。</p>
<h4 id="4-模型树"><a href="#4-模型树" class="headerlink" title="4 模型树"></a>4 模型树</h4><blockquote>
<p>下面将重用部分已有的树构建代码来创建一种新的树。该树仍然采用二元切分，但叶节点不再是简单的数值，取而代之的是一些线性模型。</p>
</blockquote>
<p>用树来对数据建模，除了把叶节点简单地设定为常数值之外，还有一种方法是把叶节点设定为<strong>分段线性函数</strong>。</p>
<p><img src="https://lh3.googleusercontent.com/-e_O6ScGnEn0/WM30heNlRpI/AAAAAAAAAX4/_6dJHau8baQ/I/14891164334358.jpg" alt=""></p>
<p>如上图所示，使用两条直线拟合的效果显然比一条直线的效果好，因此可以采用分段线性模型。</p>
<p>决策树相比于其他机器学习算法的优势之一在于结果更易理解。很显然，<strong>两条直线比很多节点组成一颗大叔更容易解释</strong>。<strong>模型树的可解释性</strong>是它优于回归树的特点之一。另外，模型树也<strong>具有更高的预测准确度</strong>。</p>
<p>对于前面回归树的代码，需要修改<strong>两个地方</strong>。第一个是<strong>在叶节点生成线性模型而不是常数值</strong>。第二个是每次切分，误差的估计函数，这里稍加变化。对于给定数据集，应该<strong>先用线性的模型来对它进行拟合，然后计算真实的目标值与模型预测值间的差值</strong>。最后<strong>将这些差值的平方求和就得到了所需的误差</strong>。</p>
<p><strong>模型树的叶节点生成函数</strong></p>
<p><img src="https://lh3.googleusercontent.com/-T8Z4wHhpOI0/WM30hlO-XRI/AAAAAAAAAX8/zqOvyFDDEf8/I/14891178335364.jpg" alt=""></p>
<h4 id="3-树剪枝"><a href="#3-树剪枝" class="headerlink" title="3 树剪枝"></a>3 树剪枝</h4><p>一棵树如果节点过多，表明该模型可能对数据进行了“过拟合”，通<strong>过降低决策树的复杂度来避免过拟合的过程称为剪枝（pruning）</strong>。在前面chooseBestSplit()中的提前<strong>终止条件，实际上是在进行一种所谓的预剪枝(prepruning)操作</strong>。另一种形式的剪枝需要使<strong>用测试集和训练集，交叉验证来发现过拟合，称作后剪枝(postpruning)</strong>。</p>
<h5 id="预剪枝"><a href="#预剪枝" class="headerlink" title="预剪枝"></a>预剪枝</h5><p>树构建算法其实对输入的参数tolS和tolN非常敏感，如果使用其他值将不太容易达到这么好的效果。然后，通过不断修改停止条件来得到合理结果并不是很好的办法。事实上，我们尝尝甚至不确定到底需要寻找什么样的结果。这正是机器学习所关注的内容，计算机应该可以给出总体的概貌。</p>
<p>还有一种称为后剪枝的方法，可以利用测试集来对树进行剪枝。<strong>由于不需要用户指定参数，后剪枝是一种更理想化的剪枝方法</strong>。</p>
<h5 id="后剪枝"><a href="#后剪枝" class="headerlink" title="后剪枝"></a>后剪枝</h5><p>使用后剪枝方法需要将数据集分成测试集和训练集。首先指定参数，使得构建出的树足够大，足够复杂，便于剪枝。接下来从上而下找到叶子节点，<strong>用测试集来判断将这些叶节点合并是否能降低测试误差。如果是的话就合并</strong>。</p>
<p><strong>伪代码：</strong></p>
<ul>
<li>基于已有的树切分测试数据</li>
<li>如果存在任意子集是一棵树，则在该子集上递归剪枝过程</li>
<li>左右子集都剪枝完了之后，判断一下左右两边是否都已经是叶子结点了（可能原来就是，或者剪枝完了塌陷成叶子结点）<ul>
<li>计算合并或者不合并的误差</li>
<li>如果合并会降低误差的话，就将叶节点合并*</li>
</ul>
</li>
</ul>
<p><img src="https://lh3.googleusercontent.com/-NalYQwHqU4I/WM30iA3gLXI/AAAAAAAAAYA/HCjr32l-BIQ/I/14891139688717.jpg" alt=""></p>
<h4 id="5-示例树回归与标准回归的比较"><a href="#5-示例树回归与标准回归的比较" class="headerlink" title="5 示例树回归与标准回归的比较"></a>5 示例树回归与标准回归的比较</h4><p><strong>预测代码：</strong></p>
<p><img src="https://lh3.googleusercontent.com/-EXb3an3HNz4/WM30ilwLGnI/AAAAAAAAAYE/0XKtREK6e38/I/14891180492872.jpg" alt=""></p>
<p><strong>比较：</strong></p>
<p><img src="https://lh3.googleusercontent.com/-IbMw2VfkuxI/WM30igqOMFI/AAAAAAAAAYI/7dcpdW2Csn8/I/14891181768319.jpg" alt=""></p>
<p>对于以上数据构建三个模型，<strong>回归树、模型树以及简单线性回归</strong>，并比较相关性系数。</p>
<p><img src="https://lh3.googleusercontent.com/-0r1YDEIDqGg/WM30jBIaE5I/AAAAAAAAAYM/lEBVrRTGjOg/I/14891183274424.jpg" alt=""><br><img src="https://lh3.googleusercontent.com/-ZLGq2WuEWvU/WM30jfrgF6I/AAAAAAAAAYQ/Me1D9DPuYJk/I/14891183420538.jpg" alt=""></p>
<p>可以看出该方法在R2值上面的表现不如两种树回归方法。所以，<strong>树回归在预测复杂数据时会比简单的线性模型更有效。</strong></p>
<h4 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h4><ol>
<li>Cart可以通过特征的选择迭代建立一颗分类树，使得每次的分类平面能最好的将剩余数据分为两类</li>
<li><p>$gini=1-\Sigma(pi^2)$，表示每个类别出现的概率和与1的差值<br>分类问题：argmax（Gini-GiniLeft-GiniRight）<br>回归问题：argmax(Var-VarLeft-VarRight)<br>查找最佳特征f已经最佳属性阈值th，小于th的在左边，大于th的在右边子树<br>分类回归树(Classification And Regression Tree)是一个决策二叉树，在通过递归的方式建立，每个节点在分裂的时候都是希望通过最好的方式将剩余的样本划分成两类，这里的分类指标：<br>分类树：基尼指数最小化<br>回归树：平方误差最小化</p>
</li>
<li><p>分类树：<br><img src="https://lh3.googleusercontent.com/-dcBrEnFl2MA/WM30jmOzYJI/AAAAAAAAAYU/uUGPyWMKKyo/I/14892852325911.jpg" alt=""><br>最终Cart<strong>选择GiniGain最小的特征</strong>作为划分特征</p>
</li>
<li><p>回归树：</p>
</li>
</ol>
<p>以方差作为混乱程度，计算原始数据集D的方差Var(D)，更具某个特定特征以及特征值，将数据划分为左右两部分，样本在该特征上取值大于特征值的放到左边D1数据集，否则放到右边D2数据集，然后计算Var(D1)和Var(D2)。找出是的Var(D)-Var(D1)-Var(D2)最大的特征以及特征值。</p>
<p>关于剪枝：用独立的验证数据集对训练集生长的树进行剪枝（事后剪枝）。</p>
<ol>
<li>能够<strong>处理大量特征的分类</strong>，并且还<strong>不用做特征选择</strong></li>
<li>在训练完成之后<strong>能给出哪些feature的比较重要</strong></li>
<li>训练速度很快</li>
<li>容易并行</li>
<li>实现相对简单</li>
</ol>
<h4 id="7-使用情况"><a href="#7-使用情况" class="headerlink" title="7 使用情况"></a>7 使用情况</h4><p>可以将连续的特征离散化<br>ID3算法：处理离散值的量<br>C45算法：处理连续值的量<br>Cart算法：离散和连续 两者都合适？</p>
<h4 id="8-停止条件"><a href="#8-停止条件" class="headerlink" title="8 停止条件"></a>8 停止条件</h4><ol>
<li>直到<strong>每个叶子节点都只有一种类型的记录时</strong>停止，（这种方式很容易过拟合）</li>
<li>另一种是当<strong>叶子节点的记录树小于一定的阈值</strong>或者<strong>节点的信息增益小于一定的阈值</strong>时停止</li>
</ol>
<h4 id="9-决策树的分类与回归"><a href="#9-决策树的分类与回归" class="headerlink" title="9 决策树的分类与回归"></a>9 决策树的分类与回归</h4><p>分类树 输出叶子节点中所属类别最多的那一类<br>回归树 输出叶子节点中各个样本值的平均值<br>模型树  输出每个叶子节点的线性回归模型</p>
<h4 id="10-理想的决策树"><a href="#10-理想的决策树" class="headerlink" title="10 理想的决策树"></a>10 理想的决策树</h4><p>叶子节点数尽量少/深度尽量小(避免过拟合)</p>
<h4 id="11-解决决策树的过拟合"><a href="#11-解决决策树的过拟合" class="headerlink" title="11 解决决策树的过拟合"></a>11 解决决策树的过拟合</h4><ol>
<li><p>剪枝</p>
<ul>
<li>前置剪枝：在分裂节点的时候设计比较苛刻的条件，如不满足则直接停止分裂（这样干决策树无法到最优，也无法得到比较好的效果）</li>
<li>（交叉验证）后置剪枝：在树建立完之后，用单个节点代替子树，节点的分类采用子树中主要的分类（这种方法比较浪费前面的建立过程）</li>
</ul>
</li>
<li><p>随机森林</p>
</li>
</ol>
<h4 id="12-优缺点"><a href="#12-优缺点" class="headerlink" title="12 优缺点"></a>12 优缺点</h4><p>优点：<strong>计算量简单，可解释性强</strong>，比较适合<strong>处理有缺失属性值的样本</strong>，<strong>能够处理不相关的特征</strong>。<br>缺点：<strong>单颗决策树分类能力弱，并且对连续值变量难以处理</strong>；<strong>容易过拟合。</strong>（后续出现了随机森林，减小了过拟合现象）。</p>
<h2 id="三-无监督学习"><a href="#三-无监督学习" class="headerlink" title="三 无监督学习"></a>三 无监督学习</h2><h3 id="利用k-均值聚类算法对未标注数据分组"><a href="#利用K-均值聚类算法对未标注数据分组" class="headerlink" title="利用K-均值聚类算法对未标注数据分组"></a>利用K-均值聚类算法对未标注数据分组</h3><h3 id="使用apriori算法进行关联分析"><a href="#使用Apriori算法进行关联分析" class="headerlink" title="使用Apriori算法进行关联分析"></a><a href="evernote:///view/233243447/s10/bb20d230-b917-4e15-b276-59497e5ae8a0/bb20d230-b917-4e15-b276-59497e5ae8a0/" target="_blank" rel="external">使用Apriori算法进行关联分析</a></h3><h3 id="使用fp-growth算法来高效发现频繁项集"><a href="#使用FP-growth算法来高效发现频繁项集" class="headerlink" title="使用FP-growth算法来高效发现频繁项集"></a><a href="evernote:///view/233243447/s10/e2a26938-6bdb-412e-97df-b01a7a0abbf8/e2a26938-6bdb-412e-97df-b01a7a0abbf8/" target="_blank" rel="external">使用FP-growth算法来高效发现频繁项集</a></h3><blockquote>
<p>参考机器学习实战第12章p>
</blockquote>
<p><strong>优点：</strong>一般比Apriori要快<br><strong>缺点：</strong>实现比较困难，在某些数据集上性能会下降<br><strong>适用数据类型：</strong>标称类数据</p>
<h3 id="em最大期望算法"><a href="#EM最大期望算法" class="headerlink" title="EM最大期望算法"></a>EM最大期望算法</h3><p>EM用于隐含变量的概率模型的极大似然估计，它一般分为两步：第一步求期望(E),第二步求极大(M)，<br>如果概率模型的变量都是观测变量，那么给定数据之后就可以直接使用极大似然法或者贝叶斯估计模型参数。<br>但是当模型含有隐含变量的时候就不能简单的用这些方法来估计，EM就是一种含有隐含变量的概率模型参数的极大似然估计法。<br>应用到的地方：混合高斯模型、混合朴素贝叶斯模型、因子分析模型</p>
<h3 id="pagerank"><a href="#PageRank" class="headerlink" title="PageRank"></a>PageRank</h3><h2 id="四-其他工具"><a href="#四-其他工具" class="headerlink" title="四 其他工具"></a>四 其他工具</h2><h3 id="利用pca来简化数据"><a href="#利用PCA来简化数据" class="headerlink" title="利用PCA来简化数据"></a>利用PCA来简化数据</h3><h4 id="矩阵分解"><a href="#矩阵分解" class="headerlink" title="矩阵分解"></a>矩阵分解</h4><p><strong>矩阵分解的概念：</strong><br>原始数据集$X\in R^{mxn}$<br>可以分解成两个小的矩阵$U\in R^{mxk}$和$V\in ^{kxn}$使得$UV=X$<br>那么我们可以找到一个矩阵$\Sigma\in R^{kxk}$,使得$U\Sigma\Sigma^{-1}V=X$，即<strong>将V矩阵的每一列都单位化</strong>，此时$U\Sigma V=X$<br>然后，我们取$UV=\hat{X}\approx X$，就是X的近似了。<br>并且它与原始数据X的距离$\left| X-UV \right|^2_F $最小化。</p>
<p><strong>矩阵分解的作用：</strong></p>
<ul>
<li>数据<strong>恢复</strong>：矩阵是稀疏的、低秩的，因此不同维度数据之间是有关联的。</li>
<li>数据<strong>去噪</strong>：分解的另一个作用是可以只抽取其中信息量最多的特征，因为剩余特征往往是无用的噪声。</li>
<li>数据<strong>降维</strong>：矩阵分解之后得到更小的矩阵，可以在保留原有信息的同时，降低数据的存储空间。</li>
<li>发现<strong>数据内部隐含结构</strong>：通过矩阵分解之后，数据可以到达新的特征空间，在新的空间中往往具有更显著、高区分度的特征。</li>
</ul>
<h3 id="利用svd简化数据"><a href="#利用SVD简化数据" class="headerlink" title="利用SVD简化数据"></a>利用SVD简化数据</h3><ul>
<li>[ ]  ToDo</li>
</ul>
<h3 id="lda"><a href="#LDA" class="headerlink" title="LDA"></a>LDA</h3><ul>
<li>[ ]  ToDo</li>
</ul>
<h3 id="大数据和mapreduce"><a href="#大数据和MapReduce" class="headerlink" title="大数据和MapReduce"></a>大数据和MapReduce</h3><h2 id="五-编程语言和数学"><a href="#五-编程语言和数学" class="headerlink" title="五 编程语言和数学"></a>五 编程语言和数学</h2><h3 id="python入门"><a href="#Python入门" class="headerlink" title="Python入门"></a>Python入门</h3><h3 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h3><h4 id="1-连续-可导与可微的关系"><a href="#1-连续、可导与可微的关系" class="headerlink" title="1 连续、可导与可微的关系"></a>1 连续、可导与可微的关系</h4><p>偏导数连续是函数可微的充分条件，函数可微是函数可导和函数连续的充分条件，函数可导和函数连续无必然联系。</p>
<p><img src="https://lh3.googleusercontent.com/-nQCqnH4xMBc/WM30juRZUhI/AAAAAAAAAYY/8Lf22zbtqlI/I/14896630590582.jpg" alt=""></p>
<blockquote>
<p>参考：<a href="http://zhihu.com/question/23468713/answer/26043048" target="_blank" rel="external">函数可导与可微的直观联系</a></p>
</blockquote>
<h3 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h3><h3 id="概率论复习"><a href="#概率论复习" class="headerlink" title="概率论复习"></a>概率论复习</h3><h4 id="1-高斯分布"><a href="#1-高斯分布" class="headerlink" title="1 高斯分布"></a>1 高斯分布</h4><p><strong>多维高斯概率密度函数：</strong><br><img src="https://lh3.googleusercontent.com/-QDBDv1PN854/WM30j_GFpmI/AAAAAAAAAYc/2cFAV2iama4/I/14894912474064.jpg" alt=""></p>
<blockquote>
<p>参考：机器学习-周志华-附录</p>
</blockquote>
<h3 id="机器学习算法分类图"><a href="#机器学习算法分类图" class="headerlink" title="机器学习算法分类图"></a>机器学习算法分类图</h3><p><img src="https://lh3.googleusercontent.com/-AKz6_ag6K4w/WM30kJYu85I/AAAAAAAAAYg/z3PvfY0LKpQ/I/%25255BUNSET%25255D.png" alt="机器学习算法分类"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="机器学习" scheme="http://stevechoris.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://stevechoris.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="面试整理" scheme="http://stevechoris.github.io/tags/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>如何从零构建一个卷积神经网络分类器 - TensorFlow学习整理</title>
    <link href="http://stevechoris.github.io/2017/02/21/%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%88%86%E7%B1%BB%E5%99%A8-TensorFlow%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    <id>http://stevechoris.github.io/2017/02/21/如何从零构建一个卷积神经网络分类器-TensorFlow学习整理/</id>
    <published>2017-02-21T06:40:42.000Z</published>
    <updated>2017-03-31T14:47:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;<a id="more"></a></p>
<h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><blockquote>
<p>参考Deep Learning Tutorial</p>
</blockquote>
<h2 id="tensorflow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h2><blockquote>
<ul>
<li>TensorFlow是一个基于数据流图的深度学习框架</li>
<li>图中的节点表示数学运算，而图边表示在它们之间传递的张量（多维数组）</li>
<li>TensorFlow的优点是架构非常灵活，允许你通过<strong>单一的API</strong>将计算部署到PC机，服务器或移动设备的一个或多个CPU或GPU</li>
<li>目前的版本是1.0，基于8GPU对Inception V3实现了7.3倍加速，以及基于64GPU对分布式Inception V3训练实现58倍加速。主要引入了以下新的特点：<ul>
<li>提供Java和Go的实验API</li>
<li>引入了高级API模块：<code>tf.contrib.learn</code>，还包含一个全新的<code>tf.keras</code>模块，能够与高级神经网络库Keras完全兼容</li>
<li>发布了面向CPU和GPU的TensorFlow图形的特定领域编译器XLA的实验版本</li>
<li>生成TensorFlow Debugger(tfdbg)，一个用于调试实时TensorFlow程序的命令行界面和API</li>
</ul>
</li>
</ul>
<p>接下来我将结合如何从零开始构建一个卷积神经网络图像分类器来介绍并总结TensorFlow的使用经验</p>
</blockquote>
<h3 id="图像数据的创建"><a href="#图像数据的创建" class="headerlink" title="图像数据的创建"></a>图像数据的创建</h3><p><img src="https://lh3.googleusercontent.com/-bfpA60gUBjo/WKml0jD5eqI/AAAAAAAAAUQ/U_4EtRPZ88I/I/%25255BUNSET%25255D.png" alt="数据获取与组织"></p>
<h3 id="读取图片并保存为tfrecords文件"><a href="#读取图片并保存为tfrecords文件" class="headerlink" title="读取图片并保存为tfrecords文件"></a>读取图片并保存为tfrecords文件</h3><blockquote>
<p>.tfrecords文件为TensorFlow特有的序列化，保存数据的文件。便于后续的大数据的读取。</p>
</blockquote>
<p><img src="https://lh3.googleusercontent.com/-vNuMu38aATc/WKmuEIr8_KI/AAAAAAAAAUs/o12aj7W4oUk/I/14875150953274.jpg" alt=""></p>
<h3 id="训练时数据的读取"><a href="#训练时数据的读取" class="headerlink" title="训练时数据的读取"></a>训练时数据的读取</h3><p><img src="https://lh3.googleusercontent.com/-Q54gpCCUu-g/WKmuETFjm6I/AAAAAAAAAUw/cfJ_an92XNw/I/14875151258687.jpg" alt=""></p>
<h3 id="模型的定义"><a href="#模型的定义" class="headerlink" title="模型的定义"></a>模型的定义</h3><blockquote>
<p>到上一步为止，我们已经可以获得用于训练的一个batch的examples和labels，其本质为numpy数组。如果你直接有numpy数组数据，也可以直接用于训练或预测。<br>Tensorflow运行需要两步：1. 定义图的结构 2. 将操作放到一个会话中(Session)中运行。<br>因此，在TensorFlow可以运行之前，我们必须先定义Graph，它是整个模型的结构。 </p>
</blockquote>
<p>TensorFlow模型主要有三个部分，和机器学习算法的三个主要部分对应。</p>
<ul>
<li>Inference: 定义神经网络的输入，输出，隐含层单元以及权重，对于一个batch的输入，可以通过前馈计算，输出一个batch的logits(可以理解为每一类的输出大小)。</li>
<li>Loss: 通过logits和labels计算出当前输出结果的预测值与实际值之间差距的大小。通常使用的是softmax_cross_entropy</li>
<li>Training: 通常使用的AdamOptimizer（自适应的随机梯度下降方法）。涉及到权重衰减，自适应学习率和动量等，使得模型不断趋向于最优解。不会限于局部最优且不会过冲。</li>
</ul>
<h4 id="inference中用到的主要函数"><a href="#Inference中用到的主要函数" class="headerlink" title="Inference中用到的主要函数"></a>Inference中用到的主要函数</h4><h5 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h5><ul>
<li><code>tf.get_variable</code> # 定义卷积核与偏置的初始权值</li>
<li><code>tf.add_to_collection</code> # 添加变量到字典中</li>
<li><code>tf.nn.conv2d</code> # 卷积</li>
<li><code>tf.nn.bias_add</code> # 偏置</li>
</ul>
<h5 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h5><ul>
<li><code>tf.nn.max_pool</code></li>
</ul>
<h5 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h5><ul>
<li><code>tf.get_variable</code> # 定义全连接和偏置的初始权值</li>
<li><code>tf.reshape</code> # 可能需要将最后池化层结果拉长成一个向量</li>
<li><code>tf.nn.relu_layer</code> # 添加ReLU非线性模块</li>
</ul>
<h5 id="dropout层"><a href="#Dropout层" class="headerlink" title="Dropout层"></a>Dropout层</h5><ul>
<li><code>tf.nn.dropout</code> # 在最后全连接层后加入dropout</li>
</ul>
<h5 id="输出层"><a href="#输出层" class="headerlink" title="输出层"></a>输出层</h5><ul>
<li><code>tf.get_variable</code> # 定义全连接和偏置的初识权值</li>
<li><code>tf.add(tf.matmul())</code> # 最后全连接方式输出logits</li>
</ul>
<blockquote>
<p>注意当模型复杂化的时候可以使用<code>tf.variable_scope</code>和<code>tf.name_scope</code>函数来共享参数。<br>其中<code>tf.variable_scope</code>主要影响变量的命名，但默认会调用<code>tf.name_scope</code>，而<code>tf.name_scope</code>只会影响ops的命名。</p>
</blockquote>
<h4 id="losslogits-labels中用到的主要函数"><a href="#Loss-logits-labels-中用到的主要函数" class="headerlink" title="Loss(logits, labels)中用到的主要函数:"></a>Loss(logits, labels)中用到的主要函数:</h4><ul>
<li><code>tf.reshape</code> # 将labels reshape为[batch_size, 1]大小</li>
<li><code>tf.concat</code> # 与同样大小的tf.range(0, batch_size)连接</li>
<li><code>tf.sparse_to_dense</code> # 稀疏矩阵转为稠密矩阵</li>
<li><code>tf.nn.softmax_cross_entropy_with_logits</code> # 计算交叉熵</li>
<li><code>tf.reduce_mean</code> # 计算平均值</li>
</ul>
<h4 id="trainingloss-global_step中用到的主要函数"><a href="#Training-loss-global-step-中用到的主要函数" class="headerlink" title="Training(loss, global_step)中用到的主要函数"></a>Training(loss, global_step)中用到的主要函数</h4><ul>
<li><code>tf.train.exponential_decay</code> # 权值衰减设置函数</li>
<li><code>optimizer=tf.train.AdamOptimizer</code> # 自适应梯度优化器</li>
<li><code>train_op=optimizer.minimize(loss, global_step=global_step)</code></li>
</ul>
<h4 id="evaluationlogits-labels-预测评估中用到的主要函数"><a href="#Evaluation-logits-labels-预测评估中用到的主要函数" class="headerlink" title="Evaluation(logits, labels) 预测评估中用到的主要函数"></a>Evaluation(logits, labels) 预测评估中用到的主要函数</h4><ul>
<li><code>tf.nn.in_top_k</code> # 计算每个实例的labels是否在logits预测的前k个类别中</li>
<li><code>tf.reduce_sum</code> # 计算预测正确的数量</li>
</ul>
<h3 id="模型运行"><a href="#模型运行" class="headerlink" title="模型运行"></a>模型运行</h3><h4 id="tensorflow的几个重要元素"><a href="#TensorFlow的几个重要元素" class="headerlink" title="TensorFlow的几个重要元素"></a>TensorFlow的几个重要元素</h4><h5 id="变量和操作"><a href="#变量和操作" class="headerlink" title="变量和操作"></a>变量和操作</h5><ul>
<li>Variable</li>
<li>Constant</li>
<li>Placeholder</li>
<li>其他各种OPs</li>
<li>Session</li>
</ul>
<h5 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h5><ul>
<li><code>tf.global_variables_initializer()</code> # 用于初始化所有变量</li>
<li><code>input_pipeline()</code> # 从tfrecords读取数据</li>
<li><code>placeholder_inputs()</code> # 定义输入</li>
<li><code>inference()</code></li>
<li><code>loss()</code></li>
<li><code>training()</code></li>
<li><code>evaluation()</code></li>
<li><code>coord = tf.train.Coordinator()</code> # 用于驱动tfrecords数据的读取</li>
<li><code>threads = tf.train.start_queue_runners(sess=sess, coord=coord)</code></li>
<li><code>Session.run()</code></li>
</ul>
<h4 id="tensorboard"><a href="#Tensorboard" class="headerlink" title="Tensorboard"></a>Tensorboard</h4><blockquote>
<p>Tensorboard用于训练过程中相关信息的记录，便于可视化的分析和监视训练过程</p>
</blockquote>
<h5 id="相关函数"><a href="#相关函数-1" class="headerlink" title="相关函数"></a>相关函数</h5><ul>
<li><code>tf.summary.scalar</code> # 定义各种标量信息，例如当前step的Accuracy, Loss等</li>
<li><code>tf.summary.image</code> # 保存当前batch的图片</li>
<li><code>tf.summary.merge_all()</code> # 将所有summary汇总为一个操作</li>
<li><code>summary_writer = tf.summary.FileWriter(log_dir,graph_def=sess.graph_def)</code> # 定义一个写summary的句柄</li>
<li><code>summary_str = sess.run([summary_op], feed_dict=summary_feed)</code> # 生成summary字符串</li>
<li><code>summary_writer.add_summary(summary_str[0], step)</code> # 将summary字符串用句柄写入文件</li>
</ul>
<h4 id="模型保存与加载"><a href="#模型保存与加载" class="headerlink" title="模型保存与加载"></a>模型保存与加载</h4><h5 id="保存模型"><a href="#保存模型" class="headerlink" title="保存模型"></a>保存模型</h5><ul>
<li><code>saver = tf.train.Saver(max_to_keep=30)</code> # 定义一个模型保存器</li>
<li><code>checkpoint_path = os.path.join(checkpoint_dir, &#39;model.ckpt&#39;)</code> # 设置保存的位置</li>
<li><code>saver.save(sess, checkpoint_path, global_step=step)</code> # 保存模型（需要Session, 位置以及当前训练的步数）</li>
</ul>
<h5 id="加载模型"><a href="#加载模型" class="headerlink" title="加载模型"></a>加载模型</h5><ul>
<li><code>ckpt = tf.train.get_checkpoint_state(checkpoint_dir=checkpoint_dir)</code> # （通过路径找到保存的模型）</li>
<li><code>saver.restore(sess, ckpt.model_checkpoint_path)</code> # 加载模型</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="机器学习" scheme="http://stevechoris.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://stevechoris.github.io/tags/Machine-Learning/"/>
    
      <category term="TensorFlow" scheme="http://stevechoris.github.io/tags/TensorFlow/"/>
    
      <category term="机器学习" scheme="http://stevechoris.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python3.5 Anaconda3 Caffe深度学习框架搭建</title>
    <link href="http://stevechoris.github.io/2017/01/12/Python3-5-Anaconda3-Caffe%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
    <id>http://stevechoris.github.io/2017/01/12/Python3-5-Anaconda3-Caffe深度学习框架搭建/</id>
    <published>2017-01-12T03:59:22.000Z</published>
    <updated>2017-03-31T14:46:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;<a id="more"></a></p>
<h2 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a>前沿</h2><blockquote>
<p>&emsp;&emsp;本文主要介绍在Anaconda3和Python3.5的环境下搭建Caffe深度学习开发环境，主要创建了Caffe的Python接口。<br>&emsp;&emsp;强调Python3.5和Anaconda3是因为，Caffe还没有全面支持Python3，并且默认不使用Anaconda。<br>&emsp;&emsp;Python3.5是目前Python3的最新版本，而且安装过程相对比较复杂。我在安装的过程中前后折腾了很久，但同时也从中学到了许多从源码编译安装程序的知识。本文主要参考了以下博客，在此表示感谢（下文博客1即代表引用了下列的第1篇博客）：</p>
<ol>
<li><a href="http://coldmooon.github.io/2016/05/15/use_caffe_with_python3.5/" target="_blank" rel="external">在 python3.5 下使用 Caffe Using Caffe with Python3.5</a></li>
<li><a href="https://github.com/saiprashanths/dl-setup#caffe" target="_blank" rel="external">Setting up a Deep Learning Machine from Scratch (Software)</a></li>
<li><a href="http://www.jianshu.com/p/663029044efd" target="_blank" rel="external">Ubuntu16.04+matlab2014a+anaconda2+OpenCV3.1+caffe安装</a></li>
<li><a href="https://yangcha.github.io/Caffe-Conda/" target="_blank" rel="external">Install Caffe With Anaconda</a></li>
</ol>
</blockquote>
<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><h3 id="ubuntu1404系统"><a href="#ubuntu14-04系统" class="headerlink" title="ubuntu14.04系统"></a>ubuntu14.04系统</h3><p>可以输入<code>cat /etc/issue</code>查看ubuntu的版本</p>
<p><img src="https://lh3.googleusercontent.com/-Vncx38SBlJE/WHcbuYf-cWI/AAAAAAAAATQ/wmEHr89ss68/I/14841947936350.jpg" alt=""></p>
<h3 id="显卡驱动与cuda安装"><a href="#显卡驱动与CUDA安装" class="headerlink" title="显卡驱动与CUDA安装"></a>显卡驱动与CUDA安装</h3><p>主要参考博客1上的步骤，Nvidia显卡驱动安装可以参考<a href="https://github.com/saiprashanths/dl-setup#nvidia-drivers" target="_blank" rel="external">Nvidia Drivers安装步骤</a>，CUDA安装可以参考<a href="https://github.com/saiprashanths/dl-setup#cuda" target="_blank" rel="external">CUDA安装步骤</a>，cuDNN安装可以参考<a href="https://github.com/saiprashanths/dl-setup#cudnn" target="_blank" rel="external">cuDNN安装步骤</a></p>
<h3 id="blas安装与配置"><a href="#BLAS安装与配置" class="headerlink" title="BLAS安装与配置"></a>BLAS安装与配置</h3><p>BLAS（基础线性代数集合）是一个应用程序接口的标准。Caffe官网上推荐了三种实现：ATLAS, MKL, or OpenBLAS。其中atlas可以直接通过命令行安装（本文采用的就是这个），如果要使用intel的MKL库，可以参考博客2的中BLAS安装与配置步骤。</p>
<h3 id="安装相关依赖包"><a href="#安装相关依赖包" class="headerlink" title="安装相关依赖包"></a>安装相关依赖包</h3><p>Caffe的编译依赖于很多C和C++的动态链接库，因此需要先用apt-get工具安装这些动态链接库。参考博客4主要步骤如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update&#10;&#10;sudo apt-get upgrade&#10;&#10;sudo apt-get install -y build-essential cmake git pkg-config&#10;&#10;sudo apt-get install -y libprotobuf-dev libleveldb-dev libsnappy-dev protobuf-compiler&#10;&#10;sudo apt-get install -y libatlas-base-dev &#10;&#10;sudo apt-get install -y --no-install-recommends libboost-all-dev&#10;&#10;sudo apt-get install -y libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br></pre></td></tr></table></figure>
<blockquote>
<p>根据博客1这里有两个包的版本要注意：<br>protobuf版本要3.0或以上版本<br>libboost版本要1.55或以上版本<br>下面介绍这两个包的具体配置</p>
</blockquote>
<h3 id="protobuf安装"><a href="#protobuf安装" class="headerlink" title="protobuf安装"></a>protobuf安装</h3><p>博客博客1提到使用apt-get安装的是2.0版本，不可以。因此需要到protobuf的<a href="https://github.com/google/protobuf/releases" target="_blank" rel="external">release页面</a>下载两个安装包：</p>
<ul>
<li>protobuf-cpp-3.0.0-beta-2.zip 或以上版本；</li>
<li>protobuf-python-3.0.0-beta-2.zip 或以上版本。<br>注意<strong>cpp和python的版本应该保持一致</strong>。</li>
</ul>
<p>这里由于我在实际安装Caffe环境的时候发现protoc已经安装了，应该是之前用apt-get的时候安装的版本是可以的，并且使用<code>protoc --version</code>发现版本为3.0.0:<br><img src="https://lh3.googleusercontent.com/-OhWgjF1km4g/WHcbu7kdDiI/AAAAAAAAATU/PmQooA_z6fA/I/14841982449906.jpg" alt=""><br>所以应该是cpp这个包已经安装好了，我就只按照[^1]的步骤到<a href="https://github.com/google/protobuf/releases" target="_blank" rel="external">release页面</a>下载并安装了对于的3.0.0版本的python包，安装步骤如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#35299;&#21387;&#23433;&#35013;&#21253;&#65292;&#36827;&#20837;&#35299;&#21387;&#30340;&#30446;&#24405;&#10;$ cd python&#10;$ python setup.py build&#10;$ python setup.py test&#10;$ python setup.py install</span><br></pre></td></tr></table></figure>
<p>这样protobuf python runtime就编译和安装好了。注意protobuf python runtime是作为pip的包安装的。但是你可以从conda里面看到他：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda list | grep protobuf</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.googleusercontent.com/-I1_TDKgfPFw/WHcbvBGCXLI/AAAAAAAAATY/wgxyPm_C7Mc/I/14841986461841.jpg" alt=""></p>
<p>我这里貌似安装了两个版本的，不过有3.0.0版本的就可以了。</p>
<h3 id="libboost安装"><a href="#libboost安装" class="headerlink" title="libboost安装"></a>libboost安装</h3><p>按照博客1的解释，libboost安装完之后会产生两个版本的libboost_python:</p>
<ul>
<li>libboost_python-py33.so.XXX</li>
<li>libboost_python-py34.so.XXX</li>
</ul>
<p>而这里必须选择py34的动态链接库，否则在实际运行Caffe的时候可能会在得不到任何错误提示的情况下python kernel直接崩溃。</p>
<p>具体安装步骤可以参考博客1的步骤，这里有一个关键步骤必须要执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/lib/x86_64-linux-gnu/libboost_python-py34.so.1.55.0 /usr/local/lib/libboost_python3.so</span><br></pre></td></tr></table></figure>
<p>就是在/usr/local/lib目录下建立一个libboost_python3.so的软链接，而且到这里，需要配置一下.bashrc或者.zshrc的环境变量：<br><img src="https://lh3.googleusercontent.com/-l0dP6gA8yd8/WHcbvVmbmcI/AAAAAAAAATc/bKgrmZBVMTc/I/14841990222795.jpg" alt=""></p>
<p>这里主要是在LD_LIBRARY_PATH环境变量中添加了Anaconda，Caffe的链接库路径以及/usr/local/lib目录，这样在编译的时候才能找到比如上面libboost_python3.so这样的动态链接库文件。</p>
<blockquote>
<p>关于LD_LIBRARY_PATH环境变量以及ld.so.conf文件和ldconfig命令的使用，可以参考<a href="http://yiranwuqing.iteye.com/blog/974246" target="_blank" rel="external">Linux 共享库 LD_LIBRARY_PATH 与ld.so.conf的使用ldconfig</a></p>
</blockquote>
<h2 id="anaconda3以及caffe的编译和安装"><a href="#Anaconda3以及Caffe的编译和安装" class="headerlink" title="Anaconda3以及Caffe的编译和安装"></a>Anaconda3以及Caffe的编译和安装</h2><h3 id="anaconda3安装"><a href="#Anaconda3安装" class="headerlink" title="Anaconda3安装"></a>Anaconda3安装</h3><p>Anaconda3的安装比较简单，在<a href="https://www.continuum.io/" target="_blank" rel="external">Anaconda官网</a>下载对于的Linux安装包（.sh文件）即可，安装命令为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda3-4.0.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>
<p>安装完Anaconda3之后可以参考博客4的建议，安装一下OpenCV包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c menpo opencv3</span><br></pre></td></tr></table></figure>
<h3 id="caffe的编译和安装"><a href="#Caffe的编译和安装" class="headerlink" title="Caffe的编译和安装"></a>Caffe的编译和安装</h3><p>到这里就可以正式进行Caffe的编译和安装了，首先下载并解压，这一步大家都会，到github官网下载即可，解压后进入Caffe目录。</p>
<p>这里的主要步骤是Makefile.config文件的配置,首先运行<code>cp Makefile.config.example Makefile.config</code>创建一个Makefile.config，然后对其中内容进行更改，运行<code>vim Makefile.config</code>打开文件，进行如下修改：</p>
<p><img src="https://lh3.googleusercontent.com/-2RWbsaYISiU/WHcbv45RSuI/AAAAAAAAATg/MlIsKmbBCkc/I/14841999824009.jpg" alt=""><br><img src="https://lh3.googleusercontent.com/-FYMfZOZcp7w/WHcbxdcn-UI/AAAAAAAAATk/oaLzYNMGyAo/I/14842000459165.jpg" alt=""><br><img src="https://lh3.googleusercontent.com/-h8acahv-hqU/WHcb0jz0EpI/AAAAAAAAATo/zOInspf24BE/I/14842000687384.jpg" alt=""><br>其中有几个地方需要注意：</p>
<ul>
<li>USE_CUDNN:=1 # 取消注释后需要保证，在ld.so.conf文件中（记住ldconfig）或LD_LIBRARY_PATH环境变量中能找到CUDNN的动态链接库</li>
<li>OPENCV_VERSION:=3 # 如果安装了OpenCV3可以启用这一项</li>
<li>BLAS:=atlas # 如果使用别的MKL或者BLAS需要在下面几行配置目录</li>
<li>ANACONDA_HOME和PYTHON_INCLUDE # 按照我上面的修改即可</li>
<li>PYTHON_LIBRARIES # 同意确保boost_python3这个动态链接库在ld.so.conf文件中（记住ldconfig）或LD_LIBRARY_PATH中能找到。可以用<code>locate boost_python</code>命令看看动态链接库文件藏在哪里，然后把相应的目录添加到LD_LIBRARY_PATH环境变量中。</li>
<li>PYTHON_LIB # 需要启用</li>
<li>WITH_PYTHON_LAYER # 如果要使用Caffe的Python接口就需要启用</li>
</ul>
<p>以上都配置完了之后，就可以编译Caffe以及Caffe的Python接口啦，参考[^2]可以使用多线程提高编译的速度：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make all -j $(($(nproc) + 1))&#10;make test -j $(($(nproc) + 1))&#10;make runtest -j $(($(nproc) + 1))&#10;make pycaffe -j $(($(nproc) + 1))</span><br></pre></td></tr></table></figure>
<p>如果一切都顺利的话，到这里Caffe以及Caffe的Python接口已经编译完成并可以使用了。最后把Caffe的Python库的路径添加到PYTHONPATH环境变量中，这样在python或者ipython程序中才能import进来：</p>
<p><img src="https://lh3.googleusercontent.com/-mLTFnG2YcJM/WHcb0zYhohI/AAAAAAAAATs/d8bvG7mUVu0/I/14842006899958.jpg" alt=""></p>
<p>PS：修改.bashrc或.zshrc之后记得<code>source ~/.bashrc</code>或者<code>source  ~/.zshrc</code>一下才生效哦。</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>打开python或ipython已经可以正常使用caffe了。</p>
<p><img src="https://lh3.googleusercontent.com/-HceH23w4JFs/WHcb1efNFtI/AAAAAAAAATw/IH_MJ3fu-5c/I/14842008115134.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="开发环境和操作系统" scheme="http://stevechoris.github.io/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Anaconda" scheme="http://stevechoris.github.io/tags/Anaconda/"/>
    
      <category term="Caffe" scheme="http://stevechoris.github.io/tags/Caffe/"/>
    
      <category term="Python" scheme="http://stevechoris.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令整理</title>
    <link href="http://stevechoris.github.io/2016/12/28/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>http://stevechoris.github.io/2016/12/28/Linux常用命令整理/</id>
    <published>2016-12-28T07:52:12.000Z</published>
    <updated>2017-03-31T14:47:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;<a id="more"></a></p>
<h2 id="磁盘信息"><a href="#磁盘信息" class="headerlink" title="磁盘信息"></a>磁盘信息</h2><h3 id="查看磁盘空间"><a href="#查看磁盘空间" class="headerlink" title="查看磁盘空间"></a>查看磁盘空间</h3><h4 id="命令格式df-h"><a href="#命令格式：df-h" class="headerlink" title="命令格式：df -h"></a>命令格式：<code>df -h</code></h4><blockquote>
<p>以磁盘分区为单位查看文件系统</p>
</blockquote>
<p><img src="../../../../images/14829116578841.jpg" alt=""></p>
<h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><h3 id="查看占用特定端口的进程"><a href="#查看占用特定端口的进程" class="headerlink" title="查看占用特定端口的进程"></a>查看占用特定端口的进程</h3><blockquote>
<p>命令格式：<code>lsof -i:6006</code></p>
<p>其中6006为想要查看的端口</p>
</blockquote>
<p><img src="../../../../images/14829118493300.jpg" alt=""></p>
<h3 id="根据进程号kill特定进程"><a href="#根据进程号KILL特定进程" class="headerlink" title="根据进程号KILL特定进程"></a>根据进程号KILL特定进程</h3><blockquote>
<p>命令格式：<code>kill -KILL 738</code></p>
<p>其中738为想要kill的进程的进程号</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="Linux命令" scheme="http://stevechoris.github.io/categories/Linux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="Linux命令" scheme="http://stevechoris.github.io/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>[经典面试题] 最长回文子串</title>
    <link href="http://stevechoris.github.io/2016/12/21/%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>http://stevechoris.github.io/2016/12/21/经典面试题-最长回文子串/</id>
    <published>2016-12-21T08:21:52.000Z</published>
    <updated>2017-03-31T09:09:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要参考<a href="http://mp.weixin.qq.com/s?src=3&amp;timestamp=1482308889&amp;ver=1&amp;signature=WTl9NE2n3M403BrLr2Xeh15hVeUNK1IGyrVBn7CDuy2Be1R46UBFS8xEZrf4-Z1GiWnRM6y4jCLhjXPaNUDUgWEkKV0jKFeG1xsC2co-k0RLqpqlfycUK4UV*pkIOQNSiDo4xEkL1FrlQnhslAFGVA==" target="_blank" rel="external">微信公众号(待字闺中)推文”【经典面试题】最长回文”
</a>整理而成，在此特别感谢。</p>
</blockquote>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.com/problems/longest-palindromic-substring/" target="_blank" rel="external">LeetCode 5. Longest Palindromic Substring</a></p>
<p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p>
<p>Example:</p>
<blockquote>
<p>Input: “babad”</p>
<p>Output: “bab”</p>
</blockquote>
<p>Note: “aba” is also a valid answer.<br>Example:</p>
<blockquote>
<p>Input: “cbbd”</p>
<p>Output: “bb”</p>
</blockquote>
<p>&emsp;<a id="more"></a></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="1-暴力解法"><a href="#1-暴力解法" class="headerlink" title="1. 暴力解法"></a>1. 暴力解法</h3><p>在外层使用2重循环找出所有子串，内层循环判断当前子串是否为回文子串。</p>
<blockquote>
<p>时间复杂度为$O(n^3)$，空间复杂度为$O(1)$</p>
</blockquote>
<h3 id="2-动态规划方法"><a href="#2-动态规划方法" class="headerlink" title="2. 动态规划方法"></a>2. 动态规划方法</h3><p>开辟一个二维数组p[i][j]用来表示str[i…j]是否为回文子串，p[i][j]的状态转移方程为：</p>
<ol>
<li>i==j时，<code>p[i][j]=true</code></li>
<li>i+1==j时，<code>p[i][j]=(str[i]==str[j])</code></li>
<li>其他情况,<code>p[i][j]=(str[i]==str[j] &amp;&amp; p[i+1]==p[j-1])</code></li>
</ol>
<blockquote>
<p>时间复杂度为$O(n^2)$，空间复杂度为$O(n^2)$, 时间上比暴力法有较大优化。</p>
</blockquote>
<h3 id="3-确定中心后像两边扩展"><a href="#3-确定中心后像两边扩展" class="headerlink" title="3. 确定中心后像两边扩展"></a>3. 确定中心后像两边扩展</h3><p>可以先确定一个字符为中心，然后向两边扩展，需要注意的是<strong>要同时考虑奇数和偶数的情况</strong>。</p>
<blockquote>
<p>时间复杂度为$O(n^2)$，空间复杂度为$O(1)$</p>
</blockquote>
<h3 id="4-后缀数组"><a href="#4-后缀数组" class="headerlink" title="4. 后缀数组"></a>4. 后缀数组</h3><p>可以利用后缀数组，将最长回文子串问题转换为求后缀数组中最长公共前缀的问题。具体做法是将字符串反转，拼接到原字符之后，中间注意用特殊字符隔开。然后求新字符串的后缀数组的任意两个字符串的最大公共前缀。</p>
<p>例如原字符串s0=”abcbd”，那转换后编程s1=”abcbd#dbcba”，则后缀数组为：<br>“a”<br>“ba”<br>“cba”<br>“bcba”<br>“dbcba”<br>“#dbcba”<br>“d#dbcba”<br>“bd#dbcba”<br>“cbd#dbcba”<br>“bcbd#dbcba”<br>“abcbd#dbcba”<br>可以看出，字符串”bcba”和“bcbd#dbcba”的最大公共前缀=3，长度最长。</p>
<blockquote>
<p>具体实现算法好坏可能导致复杂度差异很大。</p>
</blockquote>
<h3 id="5-manacher算法"><a href="#5-Manacher算法" class="headerlink" title="5. Manacher算法"></a>5. Manacher算法</h3><p>Manacher算法是一种接近线性时间的算法，在上面方法3中需要考虑回文长度为奇数和偶数的情况，这里引入一个技巧，通过在字符之间插入特殊字符（例如#字符）可以统一处理。<br>例如字符串“abba”，插入#字符后转换为“#a#b#b#a#”，然后创建一个数组p，计算以当前第i个字符为中心的回文串的半径。<br><img src="../../../../images/14823759882277.jpg" alt=""><br>可以发现任意一个回文串的长度都是奇数，而且该回文串包含的原字符串中的字符个数=p[i]-1，且这些原字符一定构成回文串。</p>
<p>具体的算法详解可以参考<a href="http://mp.weixin.qq.com/s?src=3&amp;timestamp=1482308889&amp;ver=1&amp;signature=WTl9NE2n3M403BrLr2Xeh15hVeUNK1IGyrVBn7CDuy2Be1R46UBFS8xEZrf4-Z1GiWnRM6y4jCLhjXPaNUDUgWEkKV0jKFeG1xsC2co-k0RLqpqlfycUK4UV*pkIOQNSiDo4xEkL1FrlQnhslAFGVA==" target="_blank" rel="external">微信公众号(待字闺中)推文”【经典面试题】最长回文”
</a>和<a href="http://blog.csdn.net/xingyeyongheng/article/details/9310555" target="_blank" rel="external">hdu3068之manacher算法+详解</a>这两篇博客内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要参考&lt;a href=&quot;http://mp.weixin.qq.com/s?src=3&amp;amp;timestamp=1482308889&amp;amp;ver=1&amp;amp;signature=WTl9NE2n3M403BrLr2Xeh15hVeUNK1IGyrVBn7CDuy2Be1R46UBFS8xEZrf4-Z1GiWnRM6y4jCLhjXPaNUDUgWEkKV0jKFeG1xsC2co-k0RLqpqlfycUK4UV*pkIOQNSiDo4xEkL1FrlQnhslAFGVA==&quot;&gt;微信公众号(待字闺中)推文”【经典面试题】最长回文”
&lt;/a&gt;整理而成，在此特别感谢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/&quot;&gt;LeetCode 5. Longest Palindromic Substring&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Input: “babad”&lt;/p&gt;
&lt;p&gt;Output: “bab”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note: “aba” is also a valid answer.&lt;br&gt;Example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Input: “cbbd”&lt;/p&gt;
&lt;p&gt;Output: “bb”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://stevechoris.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法与数据结构" scheme="http://stevechoris.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="面试" scheme="http://stevechoris.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Template</title>
    <link href="http://stevechoris.github.io/2016/12/17/LeetCode-Template/"/>
    <id>http://stevechoris.github.io/2016/12/17/LeetCode-Template/</id>
    <published>2016-12-17T03:10:08.000Z</published>
    <updated>2017-03-31T09:05:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;<a id="more"></a></p>
<p>title: ‘[LeetCode] 174. Dungeon Game’<br>date: 2016-09-11 18:00:53<br>categories: LeetCode</p>
<h2 id="tags-leetcode-dynamic-programming-string-stack"><a href="#tags-LeetCode-Dynamic-Programming-String-Stack" class="headerlink" title="tags: [LeetCode, Dynamic Programming, String, Stack]"></a>tags: [LeetCode, Dynamic Programming, String, Stack]</h2><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h1><p><a href="https://leetcode.com/problems/dungeon-game/" target="_blank" rel="external">174. Dungeon Game</a><br>The demons had captured the princess (<em>P</em>) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (<em>K</em>) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.</p>
<p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.</p>
<p>Some of the rooms are guarded by demons, so the knight loses health (negative integers) upon entering these rooms; other rooms are either empty (0’s) or contain magic orbs that increase the knight’s health (positive integers).</p>
<p>In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.</p>
<p><em>Write a function to determine the knight’s minimum initial health so that he is able to rescue the princess.</em></p>
<p>For example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN.</p>
<p><img src="https://lh3.googleusercontent.com/-OK3mhMH5MAI/V9VGGlpt63I/AAAAAAAAAO4/kfxbG2D6x0E/I/14735883347096.jpg" alt=""><br><!-- more --></p>
<h2 id="notes"><a href="#Notes" class="headerlink" title="Notes:"></a>Notes:</h2><p>The knight’s health has no upper bound.<br>Any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.</p>
<h1 id="题目大意"><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>骑士需要从左上角开始进入房间，每次向右或向下移动一步进入下一个房间，直到到达右下角的房间救出公主。每个房间可能由精灵把守，会造成骑士失血，用负数表示；可能为空，用0表示；也可能有魔法球，可以给骑士补血。从左上角第一个房间开始，直到进入右下角关押公主的房间，血量都不能&lt;=0。</p>
<h1 id="解题思路"><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h1><p>这是一道二维的动态规划问题，用DP[i][j]表示状态，表示接下来骑士进入(i,j)房间后能救出公主最少需要具备多少血。状态转移方程为:</p>
<p>$ dp[i][j] =  max(min(dp[i+1][j], dp[i][j+1])-dungeon[i][j], 1) $ (1)</p>
<p>选择向右或者向下中代价最小的方向，然后根据当前要进入的房间(i,j)相应调整需要的血量。</p>
<p>若$dungeon[i][j] &lt;= 0$,则$dp[i][j] =  min(dp[i+1][j], dp[i][j+1])-dungeon[i][j]$ (2)</p>
<p>若$dungeon[i][j] &gt; 0$,则$dp[i][j] =  max(min(dp[i+1][j], dp[i][j+1])-dungeon[i][j], 1) $ (3) </p>
<p>(2)、（3）式可以统一为（1）式子。</p>
<h1 id="c代码"><a href="#C-代码：" class="headerlink" title="C++代码："></a>C++代码：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;&#10;public:&#10;    int calculateMinimumHP(vector&#60;vector&#60;int&#62;&#62;&#38; dungeon) &#123;&#10;        int rows = dungeon.size();&#10;        int cols = dungeon[0].size();&#10;        vector&#60;vector&#60;int&#62;&#62; dp(rows, vector&#60;int&#62;(cols, 0));&#10;        dp[rows-1][cols-1] = max(1-dungeon[rows-1][cols-1], 1);&#10;        &#10;        for (int i=rows-2; i&#62;=0; i--) &#123;&#10;            dp[i][cols-1] =  max(dp[i+1][cols-1]-dungeon[i][cols-1], 1);&#10;        &#125;&#10;        for (int j=cols-2; j&#62;=0; j--) &#123;&#10;            dp[rows-1][j] =  max(dp[rows-1][j+1]-dungeon[rows-1][j], 1);&#10;        &#125;&#10;        for (int i=rows-2; i&#62;=0; i--) &#123;&#10;            for (int j=cols-2; j&#62;=0; j--) &#123;&#10;                dp[i][j] =  max(min(dp[i+1][j], dp[i][j+1])-dungeon[i][j], 1);&#10;            &#125;&#10;        &#125;&#10;        return dp[0][0];&#10;    &#125;&#10;&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="模板" scheme="http://stevechoris.github.io/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/tags/LeetCode/"/>
    
      <category term="模板" scheme="http://stevechoris.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>用Anaconda安装配置Jupyter Notebook和TensorFlow开发环境</title>
    <link href="http://stevechoris.github.io/2016/09/15/%E7%94%A8Anaconda%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEJupyter-Notebook%E5%92%8CTensorFlow%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://stevechoris.github.io/2016/09/15/用Anaconda安装配置Jupyter-Notebook和TensorFlow开发环境/</id>
    <published>2016-09-15T11:02:18.000Z</published>
    <updated>2017-03-31T14:32:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;<a id="more"></a></p>
<h1 id="anaconda安装"><a href="#Anaconda安装" class="headerlink" title="Anaconda安装"></a>Anaconda安装</h1><p>在<a href="https://www.continuum.io/downloads" target="_blank" rel="external">Anaconda官网</a>下载并按照指令安装。</p>
<blockquote>
<p>建议安装Python3版本，我在ubuntu14上测试发现安装Python2版本一直有<a href="http://stackoverflow.com/questions/37232446/ipython-console-cant-locate-backports-shutil-get-terminal-size-and-wont-load" target="_blank" rel="external">IPython console can’t locate “backports.shutil_get_terminal_size” and won’t load</a>的错误，按照stackoverflow上面的方法尝试也无法解决。之后看到有人评论说Python2目前已经过时了，于是重新安装了Python3版本的Anaconda后解决。</p>
</blockquote>
<h1 id="tensorflow安装"><a href="#TensorFlow安装" class="headerlink" title="TensorFlow安装"></a>TensorFlow安装</h1><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><p>在Anaconda中可以使用<a href="http://conda.pydata.org/docs/" target="_blank" rel="external">conda</a>或者<a href="https://pypi.python.org/pypi/pip" target="_blank" rel="external">pip</a>进行包管理，可以查看<a href="http://conda.pydata.org/docs/_downloads/conda-cheatsheet.pdf" target="_blank" rel="external">conda常用命令</a>和<a href="http://dcjtech.info/wp-content/uploads/2015/10/Pip-Cheatsheet.pdf" target="_blank" rel="external">pip常用命令</a>。conda可以看做是pip和virtualenv的集成，三者的常见命令对比可以查看<a href="[conda vs. pip vs. virtualenv](">conda vs. pip vs. virtualenv</a>)。</p>
<h2 id="安装包命令网速慢解决方法"><a href="#安装包命令网速慢解决方法" class="headerlink" title="安装包命令网速慢解决方法"></a>安装包命令网速慢解决方法</h2><h3 id="使用pip安装离线下载的whl格式安装包"><a href="#使用pip安装离线下载的whl格式安装包" class="headerlink" title="使用pip安装离线下载的whl格式安装包"></a>使用pip安装离线下载的whl格式安装包</h3><p>&emsp;&emsp;可以从<a href="https://pypi.python.org/pypi" target="_blank" rel="external">PyPI Python安装包中心</a>搜索并下载相应的按照包之后在本地离线安装。<br>&emsp;&emsp;例如，在下载名为<a href="https://pypi.python.org/pypi/kivy.deps.gstreamer/0.1.9" target="_blank" rel="external">kivy.deps.gstreamer</a>的包kivy.deps.gstreamer-0.1.9-cp27-cp27m-win_amd64.whl，则安装命令为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install kivy.deps.gstreamer-0.1.9-cp27-cp27m-win_amd64.whl</span><br></pre></td></tr></table></figure>
<h3 id="使用shadowsocksprivoxyproxychains-ng搭建局域网翻墙代理"><a href="#使用shadowsocks-privoxy-proxychains-ng搭建局域网翻墙代理" class="headerlink" title="使用shadowsocks)+privoxy+proxychains-ng搭建局域网翻墙代理"></a>使用<strong><a href="[shadowsocks](">shadowsocks</a>)</strong>+<strong><a href="https://www.privoxy.org/" target="_blank" rel="external">privoxy</a></strong>+<strong><a href="https://github.com/rofl0r/proxychains-ng" target="_blank" rel="external">proxychains-ng</a></strong>搭建局域网翻墙代理</h3><blockquote>
<p>&emsp;&emsp;这适用于服务器不适合直接搭建shadowsocks翻墙的情况，如果可以直接用shadowsocks翻墙，自然不需要这样做了。<br>&emsp;&emsp;我的情况是自己的Mac笔记本可以使用<a href="https://greenss.org/" target="_blank" rel="external">shadowsocks</a>[以下简称SS]或者<a href="https://ybb1024.com/" target="_blank" rel="external">鱼摆摆</a>进行翻墙，而ubuntu服务器无法翻墙。因此，我在Mac上用SS或者鱼摆摆翻墙，然后用privoxy与之相连，在本地建立一个局域网http翻墙代理，最后在ubuntu服务器上使用proxychains-ng代理到Mac上实现翻墙来安装包。</p>
</blockquote>
<p>具体的配置可以参看下面两篇博客：</p>
<blockquote>
<p>&emsp;&emsp;实际上我在配置的过程中，用privoxy代理到鱼摆摆的本地http代理端口可以正常使用，但是代理到socks5端口就不行，具体原因不太清楚。</p>
</blockquote>
<ol>
<li><a href="http://inorz.net/2015/05/24/init-privoxy-to-centos/" target="_blank" rel="external">privoxy配置</a></li>
<li><a href="http://www.nenew.net/ubuntu-linux-proxychains.html" target="_blank" rel="external">proxycahins-ng配置</a></li>
</ol>
<h2 id="安装tensorflow"><a href="#安装TensorFlow" class="headerlink" title="安装TensorFlow"></a>安装TensorFlow</h2><p>&emsp;&emsp;直接参考<a href="https://www.tensorflow.org/get_started/os_setup" target="_blank" rel="external">TensorFlow官网的安装教程即可</a>， 注意显卡驱动，Cuda Toolkit以及cuDNN需要正确的配置。具体可以参考官网或者<a href="https://github.com/saiprashanths/dl-setup" target="_blank" rel="external">github上的深度学习框架搭建</a>博客，其中包含了各种深度学习框架的搭建方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="开发环境和操作系统" scheme="http://stevechoris.github.io/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Anaconda" scheme="http://stevechoris.github.io/tags/Anaconda/"/>
    
      <category term="Conda" scheme="http://stevechoris.github.io/tags/Conda/"/>
    
      <category term="Python" scheme="http://stevechoris.github.io/tags/Python/"/>
    
      <category term="TensorFlow" scheme="http://stevechoris.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 32. Longest Valid Parentheses</title>
    <link href="http://stevechoris.github.io/2016/09/12/LeetCode-32-Longest-Valid-Parentheses/"/>
    <id>http://stevechoris.github.io/2016/09/12/LeetCode-32-Longest-Valid-Parentheses/</id>
    <published>2016-09-12T14:08:55.000Z</published>
    <updated>2017-03-31T09:05:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;<a id="more"></a></p>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h1><p><a href="https://leetcode.com/problems/longest-valid-parentheses/" target="_blank" rel="external">32. Longest Valid Parentheses</a></p>
<p>Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.</p>
<p>For “(()”, the longest valid parentheses substring is “()”, which has length = 2.</p>
<p>Another example is “)()())”, where the longest valid parentheses substring is “()()”, which has length = 4.</p>
<p>Subscribe to see which companies asked this question</p>
<h1 id="题目大意"><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给定一个仅包含’(‘和’)’的字符串，找出最长有效括号匹配子串的长度。 对于”(()”, 最长的有效括号匹配子串为”()”,长度为2。</p>
<p>另一个例子是”)()())”,最长的有效括号匹配子串为”()()”, 长度为4。</p>
<h1 id="解题思路"><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h1><h2 id="解法1-栈stack"><a href="#解法1-栈（Stack）" class="headerlink" title="解法1 栈（Stack）"></a>解法1 栈（Stack）</h2><p>引用<a href="http://mp.weixin.qq.com/s?src=3&amp;timestamp=1473686658&amp;ver=1&amp;signature=FjA7yVpEGqFGtSgxwobBBt3rKzs4TlAd6VhHAhJB1*RqJ-BuT23ywidQwlW-YhzgzqWrTVPKbvBiaQGL-lpBLOASbqi7kDUMiCMHKeDUKMwp6kXG1YXWdybs*xbOuh9SN4iWdD4g7xMz5Vlk613TBj1V-gb8oylIm2HxjjS8ZFo=" target="_blank" rel="external">克林32. Longest Valid Parentheses</a>的思路。<br>括号匹配经常会用到栈，当碰到做括号’(‘时，将字符压入栈中，当碰到’)’字符时查看栈顶元素，若栈顶元素为’(‘，则将栈顶元素弹出，否则栈为空或者栈顶元素为’)’，匹配失败，将其压入栈中。因此，最终遍历完整个字符串后栈中剩下的元素就是无法匹配的字符，而它们间隔开的就是所有括号有效匹配的字串。因此，在入栈的时候需要加入当前字符的索引，最后一次出栈的时候可以计算中间的间隔字符数量，最大的即是结果。</p>
<h2 id="c代码"><a href="#C-代码：" class="headerlink" title="C++代码："></a>C++代码：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct PT &#123;&#10;    char ch;&#10;    int pos;&#10;    PT(char ch_, int pos_):ch(ch_),pos(pos_)&#123;&#125;&#10;&#125;;&#10;&#10;class Solution &#123;&#10;public:&#10;    int longestValidParentheses(string s) &#123;&#10;        if (s.empty()) return 0;&#10;        stack&#60;PT&#62; sk;&#10;        for (int i = 0; i &#60; s.length(); i++) &#123;&#10;            int character = s[i];&#10;            if (character == &#39;(&#39;) &#123;&#10;                sk.push(PT(&#39;(&#39;, i));&#10;            &#125; else &#123;&#10;                if (!sk.empty() &#38;&#38; sk.top().ch==&#39;(&#39;) &#123;&#10;                    sk.pop();&#10;                &#125; else &#123;&#10;                    sk.push(PT(&#39;)&#39;,i));&#10;                &#125;&#10;            &#125;&#10;        &#125;&#10;        int ans = 0;&#10;        int pre_pos = s.length();&#10;        while (!sk.empty()) &#123;&#10;            int now_pos = sk.top().pos;&#10;            sk.pop();&#10;            ans = max(ans, pre_pos-now_pos - 1);&#10;            pre_pos = now_pos;&#10;        &#125;&#10;        ans = max(ans, pre_pos);&#10;        return ans;&#10;    &#125;&#10;&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="解法2-动态规划dynamic-programming"><a href="#解法2-动态规划-Dynamic-Programming" class="headerlink" title="解法2 动态规划(Dynamic Programming)"></a>解法2 动态规划(Dynamic Programming)</h2><p>时间复杂度O(N),空间复杂度O(N)<br>参考<a href="https://segmentfault.com/a/1190000003481194" target="_blank" rel="external">https://segmentfault.com/a/1190000003481194</a>的思路<br>还可以用动态规划的方法，状态dp[i]表示从下标i开始直到字符串结尾最长括号对长度，s[i]是字符串下标为i的括号。如果s[i]是左括号，而且i+d[i+1]+1是右括号的话，那么d[i] == d[i+1]+1，如果不是则为0。如果s[i]是右括号，因为没有右括号开头的括号对，因此d[i]=0。此外还需要加上dp[i+dp[i+1]+1+1)。</p>
<h2 id="c代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;&#10;    public int longestValidParentheses(String s) &#123;&#10;        int[] dp = new int[s.length()];&#10;        int maxLen = 0;&#10;        for(int i = s.length()-2; i &#62;=0; i--)&#123;&#10;            if(s.charAt(i)==&#39;(&#39;)&#123;&#10;                int end = i + dp[i+1] + 1;&#10;                if(end &#60; s.length() &#38;&#38; s.charAt(end)==&#39;)&#39;)&#123;&#10;                    dp[i] = dp[i+1] + 2;&#10;                    if(end + 1 &#60; s.length())&#123;&#10;                        dp[i] += dp[end + 1];&#10;                    &#125;&#10;                &#125;&#10;            &#125;&#10;            maxLen = Math.max(maxLen, dp[i]);&#10;        &#125;&#10;        return maxLen;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/categories/LeetCode/"/>
    
    
      <category term="Dynamic Programming" scheme="http://stevechoris.github.io/tags/Dynamic-Programming/"/>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/tags/LeetCode/"/>
    
      <category term="Stack" scheme="http://stevechoris.github.io/tags/Stack/"/>
    
      <category term="String" scheme="http://stevechoris.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 312. Burst Balloons</title>
    <link href="http://stevechoris.github.io/2016/09/11/LeetCode-312-Burst-Balloons/"/>
    <id>http://stevechoris.github.io/2016/09/11/LeetCode-312-Burst-Balloons/</id>
    <published>2016-09-11T14:16:07.000Z</published>
    <updated>2017-03-31T09:06:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;<a id="more"></a></p>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h1><p><a href="https://leetcode.com/problems/burst-balloons/" target="_blank" rel="external">312. Burst Balloons</a><br>Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] <em> nums[i] </em> nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.</p>
<p>Find the maximum coins you can collect by bursting the balloons wisely.</p>
<h2 id="note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h2><p>(1) You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.<br>(2) 0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100</p>
<h2 id="example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p>Given [3, 1, 5, 8]</p>
<p>Return 167</p>
<p>nums = [3,1,5,8] –&gt; [3,5,8] –&gt;   [3,8]   –&gt;  [8]  –&gt; []</p>
<p>coins =  3 <em> 1 </em> 5 +  3 <em> 5 </em> 8 +  1 <em> 3 </em> 8 + 1 <em> 8 </em> 1 = 167</p>
<h1 id="题目大意"><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给定n个气球，下标为0到n-1。每个气球上都标有一个数字，用数组nums表示。你被要求扎破所有气球。扎破第i个气球可以获得nums[left] <em> nums[i] </em> nums[right]枚硬币。这里left和right是与i相邻的下标。扎破气球以后，left和right就变成相邻的了。</p>
<p>寻找最优策略下可以获得的硬币数。</p>
<h1 id="解题思路-动态规划dynamic-programming"><a href="#解题思路：-动态规划（Dynamic-Programming）" class="headerlink" title="解题思路： 动态规划（Dynamic Programming）"></a>解题思路： 动态规划（Dynamic Programming）</h1><p>时间复杂度O(N^3)<br>题目需要采用逆向思维，整个题目可以理解为将一个区间的的气球依次炸掉获得硬币，可以控制最后炸掉哪个气球。状态dp[l][r]表示需要爆炸的区间，以最后一个爆破的气球m为界限，可以把问题转换为左右两个区域的子问题。<br>状态转移方程：<br><img src="https://lh3.googleusercontent.com/-VpgrtD2IjWU/V9fzN8eYx-I/AAAAAAAAAQc/m4vTG8alOeA/I/14737694297670.jpg" alt=""><br>dp[l][r]表示扎破（l,r)范围内所有气球获得的最大硬币数。 l与r的跨度k从2开始逐渐增大。</p>
<h1 id="c代码"><a href="#C-代码：" class="headerlink" title="C++代码："></a>C++代码：</h1><p>java版代码引用<a href="http://bookshadow.com/weblog/2015/11/30/leetcode-burst-balloons/" target="_blank" rel="external">书影博客[LeetCode]Burst Balloons </a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;&#10;public:&#10;    int maxCoins(vector&#60;int&#62;&#38; nums) &#123;&#10;        int sz = nums.size();&#10;        vector&#60;vector&#60;int&#62;&#62; cnt(sz, vector&#60;int&#62;(sz, 0));&#10;        return maxC(nums, 0, nums.size() - 1, 1, 1, cnt);&#10;    &#125;&#10;    int maxC(vector&#60;int&#62;&#38; nums, int from, int to, int left, int right, vector&#60;vector&#60;int&#62;&#62;&#38; cnt) &#123;&#10;        if (from &#62; to) return 0;&#10;        if (cnt[from][to]) return cnt[from][to];&#10;        if (from == to &#38;&#38; from &#62;= 0 &#38;&#38; from &#60; nums.size()) &#123;&#10;            cnt[from][to] = nums[from] * left * right;&#10;            return nums[from] * left * right;&#10;        &#125;&#10;        &#10;        int max_num = -1;&#10;        for (int i = from; i &#60; nums.size() &#38;&#38; i &#60;= to; i++) &#123;&#10;            max_num = max(max_num, maxC(nums, from, i-1, left, nums[i], cnt)&#10;                + maxC(nums, i+1, to, nums[i], right, cnt) + nums[i] * left * right);&#10;        &#125;&#10;        cnt[from][to] = max_num;&#10;        return max_num;&#10;    &#125;&#10;&#125;;&#10;&#10;public class Solution &#123;&#10;    public int maxCoins(int[] iNums) &#123;&#10;        int[] nums = new int[iNums.length + 2];&#10;        int n = 1;&#10;        for (int x : iNums) if (x &#62; 0) nums[n++] = x;&#10;        nums[0] = nums[n++] = 1;&#10;&#10;        int[][] dp = new int[n][n];&#10;        for (int k = 2; k &#60; n; ++k)&#10;            for (int l = 0; l &#60; n - k; ++l) &#123;&#10;                int r = l + k;&#10;                for (int m = l + 1; m &#60; r; ++m)&#10;                    dp[l][r] = Math.max(dp[l][r], &#10;                        nums[l] * nums[m] * nums[r] + dp[l][m] + dp[m][r]);&#10;            &#125;&#10;    &#10;        return dp[0][n - 1];&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/categories/LeetCode/"/>
    
    
      <category term="Dynamic Programming" scheme="http://stevechoris.github.io/tags/Dynamic-Programming/"/>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 354. Russian Doll Envelopes</title>
    <link href="http://stevechoris.github.io/2016/09/11/LeetCode-354-Russian-Doll-Envelopes/"/>
    <id>http://stevechoris.github.io/2016/09/11/LeetCode-354-Russian-Doll-Envelopes/</id>
    <published>2016-09-11T11:54:05.000Z</published>
    <updated>2017-03-31T09:05:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;<a id="more"></a></p>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h1><p><a href="https://leetcode.com/problems/russian-doll-envelopes/" target="_blank" rel="external">354. Russian Doll Envelopes</a></p>
<p>You have a number of envelopes with widths and heights given as a pair of integers (w, h). One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.</p>
<p>What is the maximum number of envelopes can you Russian doll? (put one inside other)</p>
<h2 id="example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p>Given envelopes = [[5,4],[6,4],[6,7],[2,3]], the maximum number of envelopes you can Russian doll is 3 ([2,3] =&gt; [5,4] =&gt; [6,7]).</p>
<h1 id="题目大意"><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>题意比较简单，给定一定量不同长宽的信封，小的信封可以放在大的信封内部，问最多能嵌套放几个。</p>
<h1 id="解题思路"><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h1><p>首先将信封(w,h)按照按照宽度排序，宽度小的在宽度大的后面，若相等，则长度小的在前，这样排在后面的信封不可能包含在前面的信封之中。</p>
<p>动态规划的思想也从中而来，状态DP[i]表示第i个信封所包含的信封的数量。从上面可知，若一个信封包含其他的信封(DP[i]&gt;1)则，它包含的一定是排在它之前的某个信封，即状态转移方程为</p>
<p>对每个信封i，初始化： $DP[i] = 1$ (1)<br>对于i&gt;=2，<img src="https://lh3.googleusercontent.com/-hMRCL5fA6zs/V9VTz0o8YhI/AAAAAAAAAPY/3Kquslplmm4/I/14735984062721.jpg" alt=""></p>
<h1 id="c代码"><a href="#C-代码：" class="headerlink" title="C++代码："></a>C++代码：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct cmp &#123;&#10;  bool operator()(pair&#60;int,int&#62;&#38; a, pair&#60;int,int&#62;&#38; b) &#123;&#10;      return b.first &#60; a.first || (b.first==a.first &#38;&#38; b.second &#60;a.second);&#10;  &#125;  &#10;&#125;;&#10;class Solution &#123;&#10;public:&#10;    int maxEnvelopes(vector&#60;pair&#60;int, int&#62;&#62;&#38; envelopes) &#123;&#10;        sort(envelopes.begin(), envelopes.end());&#10;        int n = envelopes.size();&#10;        if (n &#60;= 1) return n;&#10;        &#10;        int ans = INT_MIN;&#10;        vector&#60;int&#62; dp(n, 1);&#10;        vector&#60;int&#62; pre(n, -1);&#10;        for (int i=1; i&#60;n; i++) &#123;&#10;            for (int j=0; j&#60;i; j++) &#123;&#10;                if (canContain(envelopes[i], envelopes[j]) &#38;&#38; dp[j]+1&#62;dp[i]) &#123;&#10;                    dp[i] = dp[j]+1;&#10;                    pre[i] = j;&#10;                &#125;&#10;            &#125;&#10;        &#125;&#10;        &#10;        for (int i=0; i&#60;n; i++) &#123;&#10;            ans = max(ans, dp[i]);&#10;        &#125;&#10;        return ans;&#10;    &#125;&#10;    &#10;    bool canContain(pair&#60;int,int&#62;&#38; a, pair&#60;int,int&#62;&#38; b) &#123;&#10;        return a.first &#62; b.first &#38;&#38; a.second &#62; b.second;&#10;    &#125;&#10;&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/categories/LeetCode/"/>
    
    
      <category term="Dynamic Programming" scheme="http://stevechoris.github.io/tags/Dynamic-Programming/"/>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 174. Dungeon Game</title>
    <link href="http://stevechoris.github.io/2016/09/11/LeetCode-174-Dungeon-Game/"/>
    <id>http://stevechoris.github.io/2016/09/11/LeetCode-174-Dungeon-Game/</id>
    <published>2016-09-11T10:00:53.000Z</published>
    <updated>2017-03-31T09:05:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;<a id="more"></a></p>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h1><p><a href="https://leetcode.com/problems/dungeon-game/" target="_blank" rel="external">174. Dungeon Game</a><br>The demons had captured the princess (<em>P</em>) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (<em>K</em>) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.</p>
<p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.</p>
<p>Some of the rooms are guarded by demons, so the knight loses health (negative integers) upon entering these rooms; other rooms are either empty (0’s) or contain magic orbs that increase the knight’s health (positive integers).</p>
<p>In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.</p>
<p><em>Write a function to determine the knight’s minimum initial health so that he is able to rescue the princess.</em></p>
<p>For example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN.</p>
<p><img src="https://lh3.googleusercontent.com/-OK3mhMH5MAI/V9VGGlpt63I/AAAAAAAAAO4/kfxbG2D6x0E/I/14735883347096.jpg" alt=""></p>
<h2 id="notes"><a href="#Notes" class="headerlink" title="Notes:"></a>Notes:</h2><p>The knight’s health has no upper bound.<br>Any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.</p>
<h1 id="题目大意"><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>骑士需要从左上角开始进入房间，每次向右或向下移动一步进入下一个房间，直到到达右下角的房间救出公主。每个房间可能由精灵把守，会造成骑士失血，用负数表示；可能为空，用0表示；也可能有魔法球，可以给骑士补血。从左上角第一个房间开始，直到进入右下角关押公主的房间，血量都不能&lt;=0。</p>
<h1 id="解题思路"><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h1><p>这是一道二维的动态规划问题，用DP[i][j]表示状态，表示接下来骑士进入(i,j)房间后能救出公主最少需要具备多少血。状态转移方程为:</p>
<p>$ dp[i][j] =  max(min(dp[i+1][j], dp[i][j+1])-dungeon[i][j], 1) $ (1)</p>
<p>选择向右或者向下中代价最小的方向，然后根据当前要进入的房间(i,j)相应调整需要的血量。</p>
<p>若$dungeon[i][j] &lt;= 0$,则$dp[i][j] =  min(dp[i+1][j], dp[i][j+1])-dungeon[i][j]$ (2)</p>
<p>若$dungeon[i][j] &gt; 0$,则$dp[i][j] =  max(min(dp[i+1][j], dp[i][j+1])-dungeon[i][j], 1) $ (3) </p>
<p>(2)、（3）式可以统一为（1）式子。</p>
<h1 id="c代码"><a href="#C-代码：" class="headerlink" title="C++代码："></a>C++代码：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;&#10;public:&#10;    int calculateMinimumHP(vector&#60;vector&#60;int&#62;&#62;&#38; dungeon) &#123;&#10;        int rows = dungeon.size();&#10;        int cols = dungeon[0].size();&#10;        vector&#60;vector&#60;int&#62;&#62; dp(rows, vector&#60;int&#62;(cols, 0));&#10;        dp[rows-1][cols-1] = max(1-dungeon[rows-1][cols-1], 1);&#10;        &#10;        for (int i=rows-2; i&#62;=0; i--) &#123;&#10;            dp[i][cols-1] =  max(dp[i+1][cols-1]-dungeon[i][cols-1], 1);&#10;        &#125;&#10;        for (int j=cols-2; j&#62;=0; j--) &#123;&#10;            dp[rows-1][j] =  max(dp[rows-1][j+1]-dungeon[rows-1][j], 1);&#10;        &#125;&#10;        for (int i=rows-2; i&#62;=0; i--) &#123;&#10;            for (int j=cols-2; j&#62;=0; j--) &#123;&#10;                dp[i][j] =  max(min(dp[i+1][j], dp[i][j+1])-dungeon[i][j], 1);&#10;            &#125;&#10;        &#125;&#10;        return dp[0][0];&#10;    &#125;&#10;&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/categories/LeetCode/"/>
    
    
      <category term="Dynamic Programming" scheme="http://stevechoris.github.io/tags/Dynamic-Programming/"/>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/tags/LeetCode/"/>
    
      <category term="Stack" scheme="http://stevechoris.github.io/tags/Stack/"/>
    
      <category term="String" scheme="http://stevechoris.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 解题报告</title>
    <link href="http://stevechoris.github.io/2016/09/10/LeetCode-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <id>http://stevechoris.github.io/2016/09/10/LeetCode-解题报告/</id>
    <published>2016-09-10T15:20:55.000Z</published>
    <updated>2017-03-31T09:06:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;<a id="more"></a></p>
<table>
<thead>
<tr>
<th>#</th>
<th>解题报告</th>
<th>分类</th>
<th>难度</th>
</tr>
</thead>
<tbody>
<tr>
<td>32</td>
<td><a href="http://stevechoris.github.io/2016/09/12/LeetCode-32-Longest-Valid-Parentheses/">Longest Valid Parentheses</a></td>
<td><a href="http://stevechoris.github.io/tags/Dynamic-Programming/">Dynamic Programming</a> <a href="http://stevechoris.github.io/all-tags/#Stack-list">Stack</a> <a href="http://stevechoris.github.io/all-tags/#String-list">String</a></td>
<td>Hard</td>
</tr>
<tr>
<td>174</td>
<td><a href="http://stevechoris.github.io/2016/09/11/LeetCode-174-Dungeon-Game/">Dungeon Game</a></td>
<td><a href="http://stevechoris.github.io/tags/Dynamic-Programming/">Dynamic Programming</a></td>
<td>Hard</td>
</tr>
<tr>
<td>312</td>
<td><a href="http://stevechoris.github.io/2016/09/11/LeetCode-312-Burst-Balloons/">Burst Balloons</a></td>
<td><a href="http://stevechoris.github.io/tags/Dynamic-Programming/">Dynamic Programming</a></td>
<td>Hard</td>
</tr>
<tr>
<td>354</td>
<td><a href="http://stevechoris.github.io/2016/09/11/LeetCode-354-Russian-Doll-Envelopes/">Russian Doll Envelopes</a></td>
<td><a href="http://stevechoris.github.io/tags/Dynamic-Programming/">Dynamic Programming</a></td>
<td>Hard</td>
</tr>
<tr>
<td>377</td>
<td><a href="http://stevechoris.github.io/2016/09/10/LeetCode-377-Combination-Sum/">Combination Sum</a></td>
<td><a href="http://stevechoris.github.io/tags/Dynamic-Programming/">Dynamic Programming</a></td>
<td>Medium</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>天使的模样</title>
    <link href="http://stevechoris.github.io/2016/09/10/Post-with-cover-image/"/>
    <id>http://stevechoris.github.io/2016/09/10/Post-with-cover-image/</id>
    <published>2016-09-10T13:29:21.000Z</published>
    <updated>2017-03-31T09:06:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;<a id="more"></a></p>
<p>女孩的名叫海莉·福特，今年九岁，来自华盛顿州布雷默顿，与她小小的年龄不相称的是，她正举着钉枪，怀着大大的心意，在给流浪者建造庇护所。海莉说：“我觉得每个人都应该有一个住的地方，还有人无家可归，我得给他们建造房子。”目前，在妈妈和祖父的帮助下，海莉在社区里给无家可归的人们建造第一座木房子，希望能靠自己的努力来改变流浪汉们的生活。<br><img src="https://lh3.googleusercontent.com/Zp-gyIPPyW3_di9qyWkpmuzZLdo9_YUA_oh5aRVfbo4RCee-UbamG1Zul0P5b5cG5-XWFoIoK28jSTw5P0lMx2XPql28_nkAnY_Z900j9_tqdCwAMuJdebhxH0czigPyQtF5W2B3IjVHzkZfUak_QhyG0CV1NQseOIcx67l0LlSXM4NJDI91V2NwH3nx1qw9TmxavquFNVrHgHSZDu2-Q40-3HVBihqXB0BJ7ZVPnA88rqY9wlhy4AeySCXk9wOmEdSaah2DXcapBqM0QITdFt6EqqxATk_QFH7p0vW4oUYapnHCBtjKJTLJAfptKgeCMsa7-LRavFTfaCiBRHlesBznzic-_x7QP9f38h7TBGJtEYbJ68T019NEA59od-hVxBCpLKBthEWSjTDL9R-nwkFLCqgVPtomK1HzcP46h5jcSWjmd5-SEnCT0BtnPArmOrK38vSa3bkl_PTwII-KZcKkPXJgBJ76ppBraBrTJJbdVTpMqcIP_8Abdic5sowMz4DN2CuMoppxlTOc9Y2KSFdOX29bHaVPQQOnMdmm7XIexDno1Rwj6rcoVNxr2wk3aah5bjzRdervHQNK6QN4qMG5sMbLKhCZNDhFgfjsgbFxKMBR=w520-h356-no" alt="天使"></p>
<p>海莉为流浪汉们做公益已经有四年的时间了。那还是四年前，她她与妈妈米兰达逛完杂货铺出来，遇到了在当地丢失工作的流浪汉爱德华，他坐在路边，目光呆滞，已经很多天没吃饱饭了，饿得奄奄一息，五岁的海莉动了恻隐之心，跟妈妈商量着给爱德华买了个三明治。爱德华高兴得当场落泪，多年的流浪生涯让他看透了人情冷暖，世态的炎凉，而这个小女孩给了他温暖的一天。</p>
<p>在街上，海莉又遇到了另一个流浪汉比利·雷，一个退伍军人，在战争中失去了双腿，无家可归的他再次激起了海莉的爱心。帮完了一个又一个流浪汉后，母亲告诉她：“我们并不是多么富裕，没有能力帮助所有的人。”小女孩的眼角挂着泪水，倔强地看着母亲，她没有绝望，任性地说：“不！我要试试看！”买不起食物，她就自己去种。</p>
<p>就这样，这个善良的小女孩开始挖地，播种，除草，建栅栏，她要自己培育果蔬，为更多无家可归的人提供食物。没有种植经验，她就在晚上一个人抱着厚厚的书本学习，功夫不负有心人，她终于收获55磅的果蔬，悉数捐出，这可以满足流浪者一年的食量。如今，她的目标是收获250磅的食物，并通过自己动手，为流浪者建造庇护所，她拿起刀子，扛起电钻她要为流浪者建一个遮风避雨的小屋，带着口罩认真的粉刷墙壁。</p>
<p>为了资助海莉的项目，妈妈米兰达向一家非营利性组织申请了一笔补助，海莉收到了3000美元的赠款。当地的一家建材商店劳氏商店承诺，海莉来采购建屋的材料能最低打五折。</p>
<p>海莉的行动触动了一大批志愿者加入。一些爱心人士也纷纷伸出援助之手，给予海莉力所能及的帮助。一位女士，为那些女流浪者捐赠了女性用品，她将物品交给了海莉，并且告诉她“不够再来拿”。一家慈善机构知道海莉的故事后，给她捐了3000美元。她将这些钱用来购买一些生活用品，在一个圣诞节送给了流浪汉的孩子，“我看到了他们每个人都特别高兴，他们告诉我说我就是他们的圣诞老人。”</p>
<p>海莉的善举，成为了一股推动改善流浪汉生活的力量。在海莉的影响下，有人开始捐钱，有人开始捐种子，更多的人开始关注身边的流浪者，他们和这些无家可归的人聊天，尽可能的帮助他们。“不应该有人在街头流浪，流浪者们需要更多人的帮助！”海莉的故事正在改变世界流浪汉的现状。</p>
<p>尽自己最大的努力，怀揣一颗善良的心，去帮助那些需要帮助的人，这个世界就会因为你的小小善举而在慢慢发生改变。如果世界上真的有天使，那么天使应该就是这个女孩的模样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="模板" scheme="http://stevechoris.github.io/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>[LeetCode] 377. Combination Sum</title>
    <link href="http://stevechoris.github.io/2016/09/10/LeetCode-377-Combination-Sum/"/>
    <id>http://stevechoris.github.io/2016/09/10/LeetCode-377-Combination-Sum/</id>
    <published>2016-09-10T08:33:28.000Z</published>
    <updated>2017-03-31T09:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;<a id="more"></a></p>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h1><p><a href="https://leetcode.com/problems/combination-sum-iv/" target="_blank" rel="external">377. Combination Sum IV</a><br>Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.</p>
<h2 id="example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><blockquote>
<p>nums = [1, 2, 3]<br>target = 4</p>
<p>The possible combination ways are:<br>(1, 1, 1, 1)<br>(1, 1, 2)<br>(1, 2, 1)<br>(1, 3)<br>(2, 1, 1)<br>(2, 2)<br>(3, 1)</p>
<p>Note that different sequences are counted as different combinations.</p>
<p>Therefore the output is 7.</p>
<h2 id="follow-up"><a href="#Follow-up" class="headerlink" title="Follow up:"></a>Follow up:</h2><p>What if negative numbers are allowed in the given array?<br>How does it change the problem?<br>What limitation we need to add to the question to allow negative numbers?</p>
</blockquote>
<h1 id="题目大意"><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给定一个无重复的正整数数组，计算得到一个目标正整数的所有可能组合方式的个数。</p>
<p>测试用例见题目描述。</p>
<p>注意不同的序列顺序应当视为不同的组合。</p>
<h2 id="进一步思考"><a href="#进一步思考：" class="headerlink" title="进一步思考："></a>进一步思考：</h2><p>给定一个无重复的正整数数组，计算得到一个目标正整数的所有可能组合方式的个数。</p>
<p>测试用例见题目描述。</p>
<p>注意不同的序列顺序应当视为不同的组合。</p>
<h1 id="解题思路"><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h1><p>动态规划（Dynamic Programming）</p>
<p>状态转移方程：dp[x + y] += dp[x]</p>
<p>其中dp[x]表示生成数字x的所有可能的组合方式的个数。</p>
<h1 id="python代码"><a href="#Python代码：" class="headerlink" title="Python代码："></a>Python代码：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):&#10;    def combinationSum4(self, nums, target):&#10;        &#34;&#34;&#34;&#10;        :type nums: List[int]&#10;        :type target: int&#10;        :rtype: int&#10;        &#34;&#34;&#34;&#10;        dp = [0] * (target + 1)&#10;        dp[0] = 1&#10;        for x in range(target + 1):&#10;            for y in nums:&#10;                if x + y &#60;= target:&#10;                    dp[x + y] += dp[x]&#10;        return dp[target]</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/categories/LeetCode/"/>
    
    
      <category term="Dynamic Programming" scheme="http://stevechoris.github.io/tags/Dynamic-Programming/"/>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>图片博客模板</title>
    <link href="http://stevechoris.github.io/2016/06/09/%E5%9B%BE%E7%89%87%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF/"/>
    <id>http://stevechoris.github.io/2016/06/09/图片博客模板/</id>
    <published>2016-06-09T05:33:36.000Z</published>
    <updated>2016-12-22T03:45:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/-Q-mL0R4-5xE/V9PJW_JCQYI/AAAAAAAAAL8/elGdM3Wd92I/I/12577849%25252C2560%25252C1600.jpg" alt="12577849,2560,1600"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-Q-mL0R4-5xE/V9PJW_JCQYI/AAAAAAAAAL8/elGdM3Wd92I/I/12577849%25252C2560%25252C1600.jpg&quot; alt=&quot;1
    
    </summary>
    
      <category term="模板" scheme="http://stevechoris.github.io/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="markdown" scheme="http://stevechoris.github.io/tags/markdown/"/>
    
      <category term="中文" scheme="http://stevechoris.github.io/tags/%E4%B8%AD%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Notebook 安装扩展插件</title>
    <link href="http://stevechoris.github.io/2016/05/29/Jupyter-Notebook-%E5%AE%89%E8%A3%85%E6%89%A9%E5%B1%95%E6%8F%92%E4%BB%B6/"/>
    <id>http://stevechoris.github.io/2016/05/29/Jupyter-Notebook-安装扩展插件/</id>
    <published>2016-05-29T07:54:37.000Z</published>
    <updated>2017-03-31T09:06:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;<a id="more"></a></p>
<h2 id="更新pip"><a href="#更新pip" class="headerlink" title="更新pip"></a>更新pip</h2><blockquote>
<p>最简单的安装方法是使用pip，首先将pip更新到最新版<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="安装jupyter-notebook-扩展"><a href="#安装Jupyter-Notebook-扩展" class="headerlink" title="安装Jupyter Notebook 扩展"></a>安装Jupyter Notebook 扩展</h2><blockquote>
<p>安装方法可以参考GitHub Jupyter Notebook主页上的<a href="https://github.com/ipython-contrib/IPython-notebook-extensions" target="_blank" rel="external">README.md</a>文档，最简单的方法是pip install</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install https://github.com/ipython-contrib/IPython-notebook-extensions/archive/master.zip --user</span><br></pre></td></tr></table></figure>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>网络不好的时候可以选择离线安装</li>
<li>需要将anaconda目录添加读写权限</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="开发环境配置" scheme="http://stevechoris.github.io/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Python" scheme="http://stevechoris.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>文字博客模板</title>
    <link href="http://stevechoris.github.io/2016/05/25/%E6%96%87%E5%AD%97%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF/"/>
    <id>http://stevechoris.github.io/2016/05/25/文字博客模板/</id>
    <published>2016-05-25T15:26:46.000Z</published>
    <updated>2017-03-31T08:54:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a test template</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a test template&lt;/p&gt;

    
    </summary>
    
      <category term="模板" scheme="http://stevechoris.github.io/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="markdown" scheme="http://stevechoris.github.io/tags/markdown/"/>
    
      <category term="中文" scheme="http://stevechoris.github.io/tags/%E4%B8%AD%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://stevechoris.github.io/2016/05/25/hello-world/"/>
    <id>http://stevechoris.github.io/2016/05/25/hello-world/</id>
    <published>2016-05-25T13:49:35.000Z</published>
    <updated>2016-05-25T13:49:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="quick-start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io
    
    </summary>
    
    
  </entry>
  
</feed>
