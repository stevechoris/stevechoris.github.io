<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Choris Steve&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://stevechoris.github.io/"/>
  <updated>2017-02-23T03:42:37.000Z</updated>
  <id>http://stevechoris.github.io/</id>
  
  <author>
    <name>Choris Steve</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何从零构建一个卷积神经网络分类器 - TensorFlow学习整理</title>
    <link href="http://stevechoris.github.io/2017/02/21/%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%88%86%E7%B1%BB%E5%99%A8-TensorFlow%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    <id>http://stevechoris.github.io/2017/02/21/如何从零构建一个卷积神经网络分类器-TensorFlow学习整理/</id>
    <published>2017-02-21T06:40:42.000Z</published>
    <updated>2017-02-23T03:42:37.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;emsp;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一-深度学习&quot;&gt;&lt;a href=&quot;#一-深度学习&quot; class=&quot;headerlink&quot; title=&quot;一 深度学习&quot;&gt;&lt;/a&gt;一 深度学习&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;参考Deep Learning Tutorial&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;二-tensorflow&quot;&gt;&lt;a href=&quot;#二-TensorFlow&quot; class=&quot;headerlink&quot; title=&quot;二 TensorFlow&quot;&gt;&lt;/a&gt;二 TensorFlow&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;TensorFlow是一个基于数据流图的深度学习框架&lt;/li&gt;
&lt;li&gt;图中的节点表示数学运算，而图边表示在它们之间传递的张量（多维数组）&lt;/li&gt;
&lt;li&gt;TensorFlow的优点是架构非常灵活，允许你通过&lt;strong&gt;单一的API&lt;/strong&gt;将计算部署到PC机，服务器或移动设备的一个或多个CPU或GPU&lt;/li&gt;
&lt;li&gt;目前的版本是1.0，基于8GPU对Inception V3实现了7.3倍加速，以及基于64GPU对分布式Inception V3训练实现58倍加速。主要引入了以下新的特点：&lt;ul&gt;
&lt;li&gt;提供Java和Go的实验API&lt;/li&gt;
&lt;li&gt;引入了高级API模块：&lt;code&gt;tf.contrib.learn&lt;/code&gt;，还包含一个全新的&lt;code&gt;tf.keras&lt;/code&gt;模块，能够与高级神经网络库Keras完全兼容&lt;/li&gt;
&lt;li&gt;发布了面向CPU和GPU的TensorFlow图形的特定领域编译器XLA的实验版本&lt;/li&gt;
&lt;li&gt;生成TensorFlow Debugger(tfdbg)，一个用于调试实时TensorFlow程序的命令行界面和API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我将结合如何从零开始构建一个卷积神经网络图像分类器来介绍并总结TensorFlow的使用经验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一图像数据的创建&quot;&gt;&lt;a href=&quot;#（一）图像数据的创建&quot; class=&quot;headerlink&quot; title=&quot;（一）图像数据的创建&quot;&gt;&lt;/a&gt;（一）图像数据的创建&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-bfpA60gUBjo/WKml0jD5eqI/AAAAAAAAAUQ/U_4EtRPZ88I/I/%25255BUNSET%25255D.png&quot; alt=&quot;数据获取与组织&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;二读取图片并保存为tfrecords文件&quot;&gt;&lt;a href=&quot;#（二）读取图片并保存为tfrecords文件&quot; class=&quot;headerlink&quot; title=&quot;（二）读取图片并保存为tfrecords文件&quot;&gt;&lt;/a&gt;（二）读取图片并保存为tfrecords文件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;.tfrecords文件为TensorFlow特有的序列化，保存数据的文件。便于后续的大数据的读取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-vNuMu38aATc/WKmuEIr8_KI/AAAAAAAAAUs/o12aj7W4oUk/I/14875150953274.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;三训练时数据的读取&quot;&gt;&lt;a href=&quot;#（三）训练时数据的读取&quot; class=&quot;headerlink&quot; title=&quot;（三）训练时数据的读取&quot;&gt;&lt;/a&gt;（三）训练时数据的读取&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-Q54gpCCUu-g/WKmuETFjm6I/AAAAAAAAAUw/cfJ_an92XNw/I/14875151258687.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;四模型的定义&quot;&gt;&lt;a href=&quot;#（四）模型的定义&quot; class=&quot;headerlink&quot; title=&quot;（四）模型的定义&quot;&gt;&lt;/a&gt;（四）模型的定义&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;到上一步为止，我们已经可以获得用于训练的一个batch的examples和labels，其本质为numpy数组。如果你直接有numpy数组数据，也可以直接用于训练或预测。&lt;br&gt;Tensorflow运行需要两步：1. 定义图的结构 2. 将操作放到一个会话中(Session)中运行。&lt;br&gt;因此，在TensorFlow可以运行之前，我们必须先定义Graph，它是整个模型的结构。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TensorFlow模型主要有三个部分，和机器学习算法的三个主要部分对应。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inference: 定义神经网络的输入，输出，隐含层单元以及权重，对于一个batch的输入，可以通过前馈计算，输出一个batch的logits(可以理解为每一类的输出大小)。&lt;/li&gt;
&lt;li&gt;Loss: 通过logits和labels计算出当前输出结果的预测值与实际值之间差距的大小。通常使用的是softmax_cross_entropy&lt;/li&gt;
&lt;li&gt;Training: 通常使用的AdamOptimizer（自适应的随机梯度下降方法）。涉及到权重衰减，自适应学习率和动量等，使得模型不断趋向于最优解。不会限于局部最优且不会过冲。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-inference中用到的主要函数&quot;&gt;&lt;a href=&quot;#1-Inference中用到的主要函数&quot; class=&quot;headerlink&quot; title=&quot;1 Inference中用到的主要函数&quot;&gt;&lt;/a&gt;1 Inference中用到的主要函数&lt;/h4&gt;&lt;h5 id=&quot;卷积层&quot;&gt;&lt;a href=&quot;#卷积层&quot; class=&quot;headerlink&quot; title=&quot;卷积层&quot;&gt;&lt;/a&gt;卷积层&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tf.get_variable&lt;/code&gt; # 定义卷积核与偏置的初始权值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.add_to_collection&lt;/code&gt; # 添加变量到字典中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.nn.conv2d&lt;/code&gt; # 卷积&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.nn.bias_add&lt;/code&gt; # 偏置&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;池化层&quot;&gt;&lt;a href=&quot;#池化层&quot; class=&quot;headerlink&quot; title=&quot;池化层&quot;&gt;&lt;/a&gt;池化层&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tf.nn.max_pool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;全连接层&quot;&gt;&lt;a href=&quot;#全连接层&quot; class=&quot;headerlink&quot; title=&quot;全连接层&quot;&gt;&lt;/a&gt;全连接层&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tf.get_variable&lt;/code&gt; # 定义全连接和偏置的初始权值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.reshape&lt;/code&gt; # 可能需要将最后池化层结果拉长成一个向量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.nn.relu_layer&lt;/code&gt; # 添加ReLU非线性模块&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;dropout层&quot;&gt;&lt;a href=&quot;#Dropout层&quot; class=&quot;headerlink&quot; title=&quot;Dropout层&quot;&gt;&lt;/a&gt;Dropout层&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tf.nn.dropout&lt;/code&gt; # 在最后全连接层后加入dropout&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;输出层&quot;&gt;&lt;a href=&quot;#输出层&quot; class=&quot;headerlink&quot; title=&quot;输出层&quot;&gt;&lt;/a&gt;输出层&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tf.get_variable&lt;/code&gt; # 定义全连接和偏置的初识权值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.add(tf.matmul())&lt;/code&gt; # 最后全连接方式输出logits&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意当模型复杂化的时候可以使用&lt;code&gt;tf.variable_scope&lt;/code&gt;和&lt;code&gt;tf.name_scope&lt;/code&gt;函数来共享参数。&lt;br&gt;其中&lt;code&gt;tf.variable_scope&lt;/code&gt;主要影响变量的命名，但默认会调用&lt;code&gt;tf.name_scope&lt;/code&gt;，而&lt;code&gt;tf.name_scope&lt;/code&gt;只会影响ops的命名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;2-losslogits-labels中用到的主要函数&quot;&gt;&lt;a href=&quot;#2-Loss-logits-labels-中用到的主要函数&quot; class=&quot;headerlink&quot; title=&quot;2 Loss(logits, labels)中用到的主要函数:&quot;&gt;&lt;/a&gt;2 Loss(logits, labels)中用到的主要函数:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tf.reshape&lt;/code&gt; # 将labels reshape为[batch_size, 1]大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.concat&lt;/code&gt; # 与同样大小的tf.range(0, batch_size)连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.sparse_to_dense&lt;/code&gt; # 稀疏矩阵转为稠密矩阵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.nn.softmax_cross_entropy_with_logits&lt;/code&gt; # 计算交叉熵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.reduce_mean&lt;/code&gt; # 计算平均值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-trainingloss-global_step中用到的主要函数&quot;&gt;&lt;a href=&quot;#3-Training-loss-global-step-中用到的主要函数&quot; class=&quot;headerlink&quot; title=&quot;3 Training(loss, global_step)中用到的主要函数&quot;&gt;&lt;/a&gt;3 Training(loss, global_step)中用到的主要函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tf.train.exponential_decay&lt;/code&gt; # 权值衰减设置函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optimizer=tf.train.AdamOptimizer&lt;/code&gt; # 自适应梯度优化器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;train_op=optimizer.minimize(loss, global_step=global_step)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;4-evaluationlogits-labels-预测评估中用到的主要函数&quot;&gt;&lt;a href=&quot;#4-Evaluation-logits-labels-预测评估中用到的主要函数&quot; class=&quot;headerlink&quot; title=&quot;4 Evaluation(logits, labels) 预测评估中用到的主要函数&quot;&gt;&lt;/a&gt;4 Evaluation(logits, labels) 预测评估中用到的主要函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tf.nn.in_top_k&lt;/code&gt; # 计算每个实例的labels是否在logits预测的前k个类别中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.reduce_sum&lt;/code&gt; # 计算预测正确的数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;五模型运行&quot;&gt;&lt;a href=&quot;#（五）模型运行&quot; class=&quot;headerlink&quot; title=&quot;（五）模型运行&quot;&gt;&lt;/a&gt;（五）模型运行&lt;/h3&gt;&lt;h4 id=&quot;1-tensorflow的几个重要元素&quot;&gt;&lt;a href=&quot;#1-TensorFlow的几个重要元素&quot; class=&quot;headerlink&quot; title=&quot;1 TensorFlow的几个重要元素&quot;&gt;&lt;/a&gt;1 TensorFlow的几个重要元素&lt;/h4&gt;&lt;h5 id=&quot;变量和操作&quot;&gt;&lt;a href=&quot;#变量和操作&quot; class=&quot;headerlink&quot; title=&quot;变量和操作&quot;&gt;&lt;/a&gt;变量和操作&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Variable&lt;/li&gt;
&lt;li&gt;Constant&lt;/li&gt;
&lt;li&gt;Placeholder&lt;/li&gt;
&lt;li&gt;其他各种OPs&lt;/li&gt;
&lt;li&gt;Session&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;相关函数&quot;&gt;&lt;a href=&quot;#相关函数&quot; class=&quot;headerlink&quot; title=&quot;相关函数&quot;&gt;&lt;/a&gt;相关函数&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tf.global_variables_initializer()&lt;/code&gt; # 用于初始化所有变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;input_pipeline()&lt;/code&gt; # 从tfrecords读取数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;placeholder_inputs()&lt;/code&gt; # 定义输入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inference()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loss()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;training()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evaluation()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coord = tf.train.Coordinator()&lt;/code&gt; # 用于驱动tfrecords数据的读取&lt;/li&gt;
&lt;li&gt;&lt;code&gt;threads = tf.train.start_queue_runners(sess=sess, coord=coord)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Session.run()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-tensorboard&quot;&gt;&lt;a href=&quot;#2-Tensorboard&quot; class=&quot;headerlink&quot; title=&quot;2 Tensorboard&quot;&gt;&lt;/a&gt;2 Tensorboard&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Tensorboard用于训练过程中相关信息的记录，便于可视化的分析和监视训练过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;相关函数&quot;&gt;&lt;a href=&quot;#相关函数-1&quot; class=&quot;headerlink&quot; title=&quot;相关函数&quot;&gt;&lt;/a&gt;相关函数&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tf.summary.scalar&lt;/code&gt; # 定义各种标量信息，例如当前step的Accuracy, Loss等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.summary.image&lt;/code&gt; # 保存当前batch的图片&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.summary.merge_all()&lt;/code&gt; # 将所有summary汇总为一个操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summary_writer = tf.summary.FileWriter(log_dir,graph_def=sess.graph_def)&lt;/code&gt; # 定义一个写summary的句柄&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summary_str = sess.run([summary_op], feed_dict=summary_feed)&lt;/code&gt; # 生成summary字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summary_writer.add_summary(summary_str[0], step)&lt;/code&gt; # 将summary字符串用句柄写入文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-模型保存与加载&quot;&gt;&lt;a href=&quot;#3-模型保存与加载&quot; class=&quot;headerlink&quot; title=&quot;3 模型保存与加载&quot;&gt;&lt;/a&gt;3 模型保存与加载&lt;/h4&gt;&lt;h5 id=&quot;保存模型&quot;&gt;&lt;a href=&quot;#保存模型&quot; class=&quot;headerlink&quot; title=&quot;保存模型&quot;&gt;&lt;/a&gt;保存模型&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;saver = tf.train.Saver(max_to_keep=30)&lt;/code&gt; # 定义一个模型保存器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkpoint_path = os.path.join(checkpoint_dir, &amp;#39;model.ckpt&amp;#39;)&lt;/code&gt; # 设置保存的位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;saver.save(sess, checkpoint_path, global_step=step)&lt;/code&gt; # 保存模型（需要Session, 位置以及当前训练的步数）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;加载模型&quot;&gt;&lt;a href=&quot;#加载模型&quot; class=&quot;headerlink&quot; title=&quot;加载模型&quot;&gt;&lt;/a&gt;加载模型&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ckpt = tf.train.get_checkpoint_state(checkpoint_dir=checkpoint_dir)&lt;/code&gt; # （通过路径找到保存的模型）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;saver.restore(sess, ckpt.model_checkpoint_path)&lt;/code&gt; # 加载模型&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="机器学习" scheme="http://stevechoris.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://stevechoris.github.io/tags/Machine-Learning/"/>
    
      <category term="TensorFlow" scheme="http://stevechoris.github.io/tags/TensorFlow/"/>
    
      <category term="机器学习" scheme="http://stevechoris.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python3.5 Anaconda3 Caffe深度学习框架搭建</title>
    <link href="http://stevechoris.github.io/2017/01/12/Python3-5-Anaconda3-Caffe%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
    <id>http://stevechoris.github.io/2017/01/12/Python3-5-Anaconda3-Caffe深度学习框架搭建/</id>
    <published>2017-01-12T03:59:22.000Z</published>
    <updated>2017-01-12T09:23:41.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一-前沿&quot;&gt;&lt;a href=&quot;#一、前沿&quot; class=&quot;headerlink&quot; title=&quot;一、前沿&quot;&gt;&lt;/a&gt;一、前沿&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;本文主要介绍在Anaconda3和Python3.5的环境下搭建Caffe深度学习开发环境，主要创建了Caffe的Python接口。&lt;br&gt;&amp;emsp;&amp;emsp;强调Python3.5和Anaconda3是因为，Caffe还没有全面支持Python3，并且默认不使用Anaconda。&lt;br&gt;&amp;emsp;&amp;emsp;Python3.5是目前Python3的最新版本，而且安装过程相对比较复杂。我在安装的过程中前后折腾了很久，但同时也从中学到了许多从源码编译安装程序的知识。本文主要参考了以下博客，在此表示感谢（下文博客1即代表引用了下列的第1篇博客）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://coldmooon.github.io/2016/05/15/use_caffe_with_python3.5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在 python3.5 下使用 Caffe Using Caffe with Python3.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/saiprashanths/dl-setup#caffe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setting up a Deep Learning Machine from Scratch (Software)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/663029044efd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ubuntu16.04+matlab2014a+anaconda2+OpenCV3.1+caffe安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://yangcha.github.io/Caffe-Conda/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Install Caffe With Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;二-准备环境&quot;&gt;&lt;a href=&quot;#二、准备环境&quot; class=&quot;headerlink&quot; title=&quot;二、准备环境&quot;&gt;&lt;/a&gt;二、准备环境&lt;/h2&gt;&lt;h3 id=&quot;1-ubuntu1404系统&quot;&gt;&lt;a href=&quot;#1-ubuntu14-04系统&quot; class=&quot;headerlink&quot; title=&quot;1. ubuntu14.04系统&quot;&gt;&lt;/a&gt;1. ubuntu14.04系统&lt;/h3&gt;&lt;p&gt;可以输入&lt;code&gt;cat /etc/issue&lt;/code&gt;查看ubuntu的版本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-Vncx38SBlJE/WHcbuYf-cWI/AAAAAAAAATQ/wmEHr89ss68/I/14841947936350.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-显卡驱动与cuda安装&quot;&gt;&lt;a href=&quot;#2-显卡驱动与CUDA安装&quot; class=&quot;headerlink&quot; title=&quot;2. 显卡驱动与CUDA安装&quot;&gt;&lt;/a&gt;2. 显卡驱动与CUDA安装&lt;/h3&gt;&lt;p&gt;主要参考博客1上的步骤，Nvidia显卡驱动安装可以参考&lt;a href=&quot;https://github.com/saiprashanths/dl-setup#nvidia-drivers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nvidia Drivers安装步骤&lt;/a&gt;，CUDA安装可以参考&lt;a href=&quot;https://github.com/saiprashanths/dl-setup#cuda&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CUDA安装步骤&lt;/a&gt;，cuDNN安装可以参考&lt;a href=&quot;https://github.com/saiprashanths/dl-setup#cudnn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cuDNN安装步骤&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-blas安装与配置&quot;&gt;&lt;a href=&quot;#3-BLAS安装与配置&quot; class=&quot;headerlink&quot; title=&quot;3. BLAS安装与配置&quot;&gt;&lt;/a&gt;3. BLAS安装与配置&lt;/h3&gt;&lt;p&gt;BLAS（基础线性代数集合）是一个应用程序接口的标准。Caffe官网上推荐了三种实现：ATLAS, MKL, or OpenBLAS。其中atlas可以直接通过命令行安装（本文采用的就是这个），如果要使用intel的MKL库，可以参考博客2的中BLAS安装与配置步骤。&lt;/p&gt;
&lt;h3 id=&quot;4-安装相关依赖包&quot;&gt;&lt;a href=&quot;#4-安装相关依赖包&quot; class=&quot;headerlink&quot; title=&quot;4. 安装相关依赖包&quot;&gt;&lt;/a&gt;4. 安装相关依赖包&lt;/h3&gt;&lt;p&gt;Caffe的编译依赖于很多C和C++的动态链接库，因此需要先用apt-get工具安装这些动态链接库。参考博客4主要步骤如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&amp;#10;&amp;#10;sudo apt-get upgrade&amp;#10;&amp;#10;sudo apt-get install -y build-essential cmake git pkg-config&amp;#10;&amp;#10;sudo apt-get install -y libprotobuf-dev libleveldb-dev libsnappy-dev protobuf-compiler&amp;#10;&amp;#10;sudo apt-get install -y libatlas-base-dev &amp;#10;&amp;#10;sudo apt-get install -y --no-install-recommends libboost-all-dev&amp;#10;&amp;#10;sudo apt-get install -y libgflags-dev libgoogle-glog-dev liblmdb-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;根据博客1这里有两个包的版本要注意：&lt;br&gt;protobuf版本要3.0或以上版本&lt;br&gt;libboost版本要1.55或以上版本&lt;br&gt;下面介绍这两个包的具体配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;protobuf安装&quot;&gt;&lt;a href=&quot;#protobuf安装&quot; class=&quot;headerlink&quot; title=&quot;protobuf安装&quot;&gt;&lt;/a&gt;protobuf安装&lt;/h3&gt;&lt;p&gt;博客博客1提到使用apt-get安装的是2.0版本，不可以。因此需要到protobuf的&lt;a href=&quot;https://github.com/google/protobuf/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;release页面&lt;/a&gt;下载两个安装包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protobuf-cpp-3.0.0-beta-2.zip 或以上版本；&lt;/li&gt;
&lt;li&gt;protobuf-python-3.0.0-beta-2.zip 或以上版本。&lt;br&gt;注意&lt;strong&gt;cpp和python的版本应该保持一致&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里由于我在实际安装Caffe环境的时候发现protoc已经安装了，应该是之前用apt-get的时候安装的版本是可以的，并且使用&lt;code&gt;protoc --version&lt;/code&gt;发现版本为3.0.0:&lt;br&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-OhWgjF1km4g/WHcbu7kdDiI/AAAAAAAAATU/PmQooA_z6fA/I/14841982449906.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;所以应该是cpp这个包已经安装好了，我就只按照[^1]的步骤到&lt;a href=&quot;https://github.com/google/protobuf/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;release页面&lt;/a&gt;下载并安装了对于的3.0.0版本的python包，安装步骤如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#35299;&amp;#21387;&amp;#23433;&amp;#35013;&amp;#21253;&amp;#65292;&amp;#36827;&amp;#20837;&amp;#35299;&amp;#21387;&amp;#30340;&amp;#30446;&amp;#24405;&amp;#10;$ cd python&amp;#10;$ python setup.py build&amp;#10;$ python setup.py test&amp;#10;$ python setup.py install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样protobuf python runtime就编译和安装好了。注意protobuf python runtime是作为pip的包安装的。但是你可以从conda里面看到他：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ conda list | grep protobuf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-I1_TDKgfPFw/WHcbvBGCXLI/AAAAAAAAATY/wgxyPm_C7Mc/I/14841986461841.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我这里貌似安装了两个版本的，不过有3.0.0版本的就可以了。&lt;/p&gt;
&lt;h3 id=&quot;libboost安装&quot;&gt;&lt;a href=&quot;#libboost安装&quot; class=&quot;headerlink&quot; title=&quot;libboost安装&quot;&gt;&lt;/a&gt;libboost安装&lt;/h3&gt;&lt;p&gt;按照博客1的解释，libboost安装完之后会产生两个版本的libboost_python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;libboost_python-py33.so.XXX&lt;/li&gt;
&lt;li&gt;libboost_python-py34.so.XXX&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而这里必须选择py34的动态链接库，否则在实际运行Caffe的时候可能会在得不到任何错误提示的情况下python kernel直接崩溃。&lt;/p&gt;
&lt;p&gt;具体安装步骤可以参考博客1的步骤，这里有一个关键步骤必须要执行：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo ln -s /usr/lib/x86_64-linux-gnu/libboost_python-py34.so.1.55.0 /usr/local/lib/libboost_python3.so&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就是在/usr/local/lib目录下建立一个libboost_python3.so的软链接，而且到这里，需要配置一下.bashrc或者.zshrc的环境变量：&lt;br&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-l0dP6gA8yd8/WHcbvVmbmcI/AAAAAAAAATc/bKgrmZBVMTc/I/14841990222795.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里主要是在LD_LIBRARY_PATH环境变量中添加了Anaconda，Caffe的链接库路径以及/usr/local/lib目录，这样在编译的时候才能找到比如上面libboost_python3.so这样的动态链接库文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于LD_LIBRARY_PATH环境变量以及ld.so.conf文件和ldconfig命令的使用，可以参考&lt;a href=&quot;http://yiranwuqing.iteye.com/blog/974246&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux 共享库 LD_LIBRARY_PATH 与ld.so.conf的使用ldconfig&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;三-anaconda3以及caffe的编译和安装&quot;&gt;&lt;a href=&quot;#三、Anaconda3以及Caffe的编译和安装&quot; class=&quot;headerlink&quot; title=&quot;三、Anaconda3以及Caffe的编译和安装&quot;&gt;&lt;/a&gt;三、Anaconda3以及Caffe的编译和安装&lt;/h2&gt;&lt;h2 id=&quot;1-anaconda3安装&quot;&gt;&lt;a href=&quot;#1-Anaconda3安装&quot; class=&quot;headerlink&quot; title=&quot;1. Anaconda3安装&quot;&gt;&lt;/a&gt;1. Anaconda3安装&lt;/h2&gt;&lt;p&gt;Anaconda3的安装比较简单，在&lt;a href=&quot;https://www.continuum.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Anaconda官网&lt;/a&gt;下载对于的Linux安装包（.sh文件）即可，安装命令为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bash Anaconda3-4.0.0-Linux-x86_64.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装完Anaconda3之后可以参考博客4的建议，安装一下OpenCV包：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;conda install -c menpo opencv3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-caffe的编译和安装&quot;&gt;&lt;a href=&quot;#2-Caffe的编译和安装&quot; class=&quot;headerlink&quot; title=&quot;2. Caffe的编译和安装&quot;&gt;&lt;/a&gt;2. Caffe的编译和安装&lt;/h2&gt;&lt;p&gt;到这里就可以正式进行Caffe的编译和安装了，首先下载并解压，这一步大家都会，到github官网下载即可，解压后进入Caffe目录。&lt;/p&gt;
&lt;p&gt;这里的主要步骤是Makefile.config文件的配置,首先运行&lt;code&gt;cp Makefile.config.example Makefile.config&lt;/code&gt;创建一个Makefile.config，然后对其中内容进行更改，运行&lt;code&gt;vim Makefile.config&lt;/code&gt;打开文件，进行如下修改：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-2RWbsaYISiU/WHcbv45RSuI/AAAAAAAAATg/MlIsKmbBCkc/I/14841999824009.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-FYMfZOZcp7w/WHcbxdcn-UI/AAAAAAAAATk/oaLzYNMGyAo/I/14842000459165.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-h8acahv-hqU/WHcb0jz0EpI/AAAAAAAAATo/zOInspf24BE/I/14842000687384.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;其中有几个地方需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;USE_CUDNN:=1 # 取消注释后需要保证，在ld.so.conf文件中（记住ldconfig）或LD_LIBRARY_PATH环境变量中能找到CUDNN的动态链接库&lt;/li&gt;
&lt;li&gt;OPENCV_VERSION:=3 # 如果安装了OpenCV3可以启用这一项&lt;/li&gt;
&lt;li&gt;BLAS:=atlas # 如果使用别的MKL或者BLAS需要在下面几行配置目录&lt;/li&gt;
&lt;li&gt;ANACONDA_HOME和PYTHON_INCLUDE # 按照我上面的修改即可&lt;/li&gt;
&lt;li&gt;PYTHON_LIBRARIES # 同意确保boost_python3这个动态链接库在ld.so.conf文件中（记住ldconfig）或LD_LIBRARY_PATH中能找到。可以用&lt;code&gt;locate boost_python&lt;/code&gt;命令看看动态链接库文件藏在哪里，然后把相应的目录添加到LD_LIBRARY_PATH环境变量中。&lt;/li&gt;
&lt;li&gt;PYTHON_LIB # 需要启用&lt;/li&gt;
&lt;li&gt;WITH_PYTHON_LAYER # 如果要使用Caffe的Python接口就需要启用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上都配置完了之后，就可以编译Caffe以及Caffe的Python接口啦，参考[^2]可以使用多线程提高编译的速度：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;make all -j $(($(nproc) + 1))&amp;#10;make test -j $(($(nproc) + 1))&amp;#10;make runtest -j $(($(nproc) + 1))&amp;#10;make pycaffe -j $(($(nproc) + 1))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果一切都顺利的话，到这里Caffe以及Caffe的Python接口已经编译完成并可以使用了。最后把Caffe的Python库的路径添加到PYTHONPATH环境变量中，这样在python或者ipython程序中才能import进来：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-mLTFnG2YcJM/WHcb0zYhohI/AAAAAAAAATs/d8bvG7mUVu0/I/14842006899958.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;PS：修改.bashrc或.zshrc之后记得&lt;code&gt;source ~/.bashrc&lt;/code&gt;或者&lt;code&gt;source  ~/.zshrc&lt;/code&gt;一下才生效哦。&lt;/p&gt;
&lt;h1 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h1&gt;&lt;p&gt;打开python或ipython已经可以正常使用caffe了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-HceH23w4JFs/WHcb1efNFtI/AAAAAAAAATw/IH_MJ3fu-5c/I/14842008115134.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前沿&quot;&gt;&lt;a href=&quot;#一、前沿&quot; class=&quot;headerlink&quot; title=&quot;一、前沿&quot;&gt;&lt;/a&gt;一、前沿&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;本文主要介绍在Anaconda3和Python3.5的环境下搭建Caffe深度学习开发环境，主要创建了Caffe的Python接口。&lt;br&gt;&amp;emsp;&amp;emsp;强调Python3.5和Anaconda3是因为，Caffe还没有全面支持Python3，并且默认不使用Anaconda。&lt;br&gt;&amp;emsp;&amp;emsp;Python3.5是目前Python3的最新版本，而且安装过程相对比较复杂。我在安装的过程中前后折腾了很久，但同时也从中学到了许多从源码编译安装程序的知识。本文主要参考了以下博客，在此表示感谢（下文博客1即代表引用了下列的第1篇博客）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://coldmooon.github.io/2016/05/15/use_caffe_with_python3.5/&quot;&gt;在 python3.5 下使用 Caffe Using Caffe with Python3.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/saiprashanths/dl-setup#caffe&quot;&gt;Setting up a Deep Learning Machine from Scratch (Software)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/663029044efd&quot;&gt;Ubuntu16.04+matlab2014a+anaconda2+OpenCV3.1+caffe安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://yangcha.github.io/Caffe-Conda/&quot;&gt;Install Caffe With Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="开发环境和操作系统" scheme="http://stevechoris.github.io/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Anaconda" scheme="http://stevechoris.github.io/tags/Anaconda/"/>
    
      <category term="Caffe" scheme="http://stevechoris.github.io/tags/Caffe/"/>
    
      <category term="Python" scheme="http://stevechoris.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令整理</title>
    <link href="http://stevechoris.github.io/2016/12/28/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>http://stevechoris.github.io/2016/12/28/Linux常用命令整理/</id>
    <published>2016-12-28T07:52:12.000Z</published>
    <updated>2017-01-31T10:53:40.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;emsp;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一-磁盘信息&quot;&gt;&lt;a href=&quot;#一-磁盘信息&quot; class=&quot;headerlink&quot; title=&quot;一. 磁盘信息&quot;&gt;&lt;/a&gt;一. 磁盘信息&lt;/h2&gt;&lt;h3 id=&quot;1-查看磁盘空间&quot;&gt;&lt;a href=&quot;#1-查看磁盘空间&quot; class=&quot;headerlink&quot; title=&quot;1. 查看磁盘空间&quot;&gt;&lt;/a&gt;1. 查看磁盘空间&lt;/h3&gt;&lt;h4 id=&quot;1-命令格式df-h&quot;&gt;&lt;a href=&quot;#1-命令格式：df-h&quot; class=&quot;headerlink&quot; title=&quot;1. 命令格式：df -h&quot;&gt;&lt;/a&gt;1. 命令格式：&lt;code&gt;df -h&lt;/code&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;以磁盘分区为单位查看文件系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;../../../../images/14829116578841.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;二-查看进程&quot;&gt;&lt;a href=&quot;#二-查看进程&quot; class=&quot;headerlink&quot; title=&quot;二. 查看进程&quot;&gt;&lt;/a&gt;二. 查看进程&lt;/h2&gt;&lt;h3 id=&quot;1-查看占用特定端口的进程&quot;&gt;&lt;a href=&quot;#1-查看占用特定端口的进程&quot; class=&quot;headerlink&quot; title=&quot;1. 查看占用特定端口的进程&quot;&gt;&lt;/a&gt;1. 查看占用特定端口的进程&lt;/h3&gt;&lt;p&gt;命令格式：&lt;code&gt;lsof -i:6006&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中6006为想要查看的端口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;../../../../images/14829118493300.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-根据进程号kill特定进程&quot;&gt;&lt;a href=&quot;#2-根据进程号KILL特定进程&quot; class=&quot;headerlink&quot; title=&quot;2. 根据进程号KILL特定进程&quot;&gt;&lt;/a&gt;2. 根据进程号KILL特定进程&lt;/h3&gt;&lt;p&gt;命令格式：&lt;code&gt;kill -KILL 738&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中738为想要kill的进程的进程号&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="Linux命令" scheme="http://stevechoris.github.io/categories/Linux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="Linux命令" scheme="http://stevechoris.github.io/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>[经典面试题] 最长回文子串</title>
    <link href="http://stevechoris.github.io/2016/12/21/%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>http://stevechoris.github.io/2016/12/21/经典面试题-最长回文子串/</id>
    <published>2016-12-21T08:21:52.000Z</published>
    <updated>2016-12-22T03:58:43.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;emsp;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文主要参考&lt;a href=&quot;http://mp.weixin.qq.com/s?src=3&amp;amp;timestamp=1482308889&amp;amp;ver=1&amp;amp;signature=WTl9NE2n3M403BrLr2Xeh15hVeUNK1IGyrVBn7CDuy2Be1R46UBFS8xEZrf4-Z1GiWnRM6y4jCLhjXPaNUDUgWEkKV0jKFeG1xsC2co-k0RLqpqlfycUK4UV*pkIOQNSiDo4xEkL1FrlQnhslAFGVA==&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微信公众号(待字闺中)推文”【经典面试题】最长回文”
&lt;/a&gt;整理而成，在此特别感谢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LeetCode 5. Longest Palindromic Substring&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Input: “babad”&lt;/p&gt;
&lt;p&gt;Output: “bab”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note: “aba” is also a valid answer.&lt;br&gt;Example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Input: “cbbd”&lt;/p&gt;
&lt;p&gt;Output: “bb”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;h3 id=&quot;1-暴力解法&quot;&gt;&lt;a href=&quot;#1-暴力解法&quot; class=&quot;headerlink&quot; title=&quot;1. 暴力解法&quot;&gt;&lt;/a&gt;1. 暴力解法&lt;/h3&gt;&lt;p&gt;在外层使用2重循环找出所有子串，内层循环判断当前子串是否为回文子串。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;时间复杂度为$O(n^3)$，空间复杂度为$O(1)$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-动态规划方法&quot;&gt;&lt;a href=&quot;#2-动态规划方法&quot; class=&quot;headerlink&quot; title=&quot;2. 动态规划方法&quot;&gt;&lt;/a&gt;2. 动态规划方法&lt;/h3&gt;&lt;p&gt;开辟一个二维数组p[i][j]用来表示str[i…j]是否为回文子串，p[i][j]的状态转移方程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;i==j时，&lt;code&gt;p[i][j]=true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;i+1==j时，&lt;code&gt;p[i][j]=(str[i]==str[j])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其他情况,&lt;code&gt;p[i][j]=(str[i]==str[j] &amp;amp;&amp;amp; p[i+1]==p[j-1])&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;时间复杂度为$O(n^2)$，空间复杂度为$O(n^2)$, 时间上比暴力法有较大优化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3-确定中心后像两边扩展&quot;&gt;&lt;a href=&quot;#3-确定中心后像两边扩展&quot; class=&quot;headerlink&quot; title=&quot;3. 确定中心后像两边扩展&quot;&gt;&lt;/a&gt;3. 确定中心后像两边扩展&lt;/h3&gt;&lt;p&gt;可以先确定一个字符为中心，然后向两边扩展，需要注意的是&lt;strong&gt;要同时考虑奇数和偶数的情况&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;时间复杂度为$O(n^2)$，空间复杂度为$O(1)$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;4-后缀数组&quot;&gt;&lt;a href=&quot;#4-后缀数组&quot; class=&quot;headerlink&quot; title=&quot;4. 后缀数组&quot;&gt;&lt;/a&gt;4. 后缀数组&lt;/h3&gt;&lt;p&gt;可以利用后缀数组，将最长回文子串问题转换为求后缀数组中最长公共前缀的问题。具体做法是将字符串反转，拼接到原字符之后，中间注意用特殊字符隔开。然后求新字符串的后缀数组的任意两个字符串的最大公共前缀。&lt;/p&gt;
&lt;p&gt;例如原字符串s0=”abcbd”，那转换后编程s1=”abcbd#dbcba”，则后缀数组为：&lt;br&gt;“a”&lt;br&gt;“ba”&lt;br&gt;“cba”&lt;br&gt;“bcba”&lt;br&gt;“dbcba”&lt;br&gt;“#dbcba”&lt;br&gt;“d#dbcba”&lt;br&gt;“bd#dbcba”&lt;br&gt;“cbd#dbcba”&lt;br&gt;“bcbd#dbcba”&lt;br&gt;“abcbd#dbcba”&lt;br&gt;可以看出，字符串”bcba”和“bcbd#dbcba”的最大公共前缀=3，长度最长。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;具体实现算法好坏可能导致复杂度差异很大。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;5-manacher算法&quot;&gt;&lt;a href=&quot;#5-Manacher算法&quot; class=&quot;headerlink&quot; title=&quot;5. Manacher算法&quot;&gt;&lt;/a&gt;5. Manacher算法&lt;/h3&gt;&lt;p&gt;Manacher算法是一种接近线性时间的算法，在上面方法3中需要考虑回文长度为奇数和偶数的情况，这里引入一个技巧，通过在字符之间插入特殊字符（例如#字符）可以统一处理。&lt;br&gt;例如字符串“abba”，插入#字符后转换为“#a#b#b#a#”，然后创建一个数组p，计算以当前第i个字符为中心的回文串的半径。&lt;br&gt;&lt;img src=&quot;../../../../images/14823759882277.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;可以发现任意一个回文串的长度都是奇数，而且该回文串包含的原字符串中的字符个数=p[i]-1，且这些原字符一定构成回文串。&lt;/p&gt;
&lt;p&gt;具体的算法详解可以参考&lt;a href=&quot;http://mp.weixin.qq.com/s?src=3&amp;amp;timestamp=1482308889&amp;amp;ver=1&amp;amp;signature=WTl9NE2n3M403BrLr2Xeh15hVeUNK1IGyrVBn7CDuy2Be1R46UBFS8xEZrf4-Z1GiWnRM6y4jCLhjXPaNUDUgWEkKV0jKFeG1xsC2co-k0RLqpqlfycUK4UV*pkIOQNSiDo4xEkL1FrlQnhslAFGVA==&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微信公众号(待字闺中)推文”【经典面试题】最长回文”
&lt;/a&gt;和&lt;a href=&quot;http://blog.csdn.net/xingyeyongheng/article/details/9310555&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hdu3068之manacher算法+详解&lt;/a&gt;这两篇博客内容。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://stevechoris.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法与数据结构" scheme="http://stevechoris.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="面试" scheme="http://stevechoris.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Template</title>
    <link href="http://stevechoris.github.io/2016/12/17/LeetCode-Template/"/>
    <id>http://stevechoris.github.io/2016/12/17/LeetCode-Template/</id>
    <published>2016-12-17T03:10:08.000Z</published>
    <updated>2017-03-30T13:18:48.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;emsp;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;title: ‘[LeetCode] 174. Dungeon Game’&lt;br&gt;date: 2016-09-11 18:00:53&lt;br&gt;categories: LeetCode&lt;/p&gt;
&lt;h2 id=&quot;tags-leetcode-dynamic-programming-string-stack&quot;&gt;&lt;a href=&quot;#tags-LeetCode-Dynamic-Programming-String-Stack&quot; class=&quot;headerlink&quot; title=&quot;tags: [LeetCode, Dynamic Programming, String, Stack]&quot;&gt;&lt;/a&gt;tags: [LeetCode, Dynamic Programming, String, Stack]&lt;/h2&gt;&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述:&quot;&gt;&lt;/a&gt;题目描述:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/dungeon-game/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;174. Dungeon Game&lt;/a&gt;&lt;br&gt;The demons had captured the princess (&lt;em&gt;P&lt;/em&gt;) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (&lt;em&gt;K&lt;/em&gt;) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.&lt;/p&gt;
&lt;p&gt;The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.&lt;/p&gt;
&lt;p&gt;Some of the rooms are guarded by demons, so the knight loses health (negative integers) upon entering these rooms; other rooms are either empty (0’s) or contain magic orbs that increase the knight’s health (positive integers).&lt;/p&gt;
&lt;p&gt;In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Write a function to determine the knight’s minimum initial health so that he is able to rescue the princess.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path RIGHT-&amp;gt; RIGHT -&amp;gt; DOWN -&amp;gt; DOWN.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-OK3mhMH5MAI/V9VGGlpt63I/AAAAAAAAAO4/kfxbG2D6x0E/I/14735883347096.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;!-- more --&gt;&lt;/p&gt;
&lt;h2 id=&quot;notes&quot;&gt;&lt;a href=&quot;#Notes&quot; class=&quot;headerlink&quot; title=&quot;Notes:&quot;&gt;&lt;/a&gt;Notes:&lt;/h2&gt;&lt;p&gt;The knight’s health has no upper bound.&lt;br&gt;Any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.&lt;/p&gt;
&lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h1&gt;&lt;p&gt;骑士需要从左上角开始进入房间，每次向右或向下移动一步进入下一个房间，直到到达右下角的房间救出公主。每个房间可能由精灵把守，会造成骑士失血，用负数表示；可能为空，用0表示；也可能有魔法球，可以给骑士补血。从左上角第一个房间开始，直到进入右下角关押公主的房间，血量都不能&amp;lt;=0。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路：&quot; class=&quot;headerlink&quot; title=&quot;解题思路：&quot;&gt;&lt;/a&gt;解题思路：&lt;/h1&gt;&lt;p&gt;这是一道二维的动态规划问题，用DP[i][j]表示状态，表示接下来骑士进入(i,j)房间后能救出公主最少需要具备多少血。状态转移方程为:&lt;/p&gt;
&lt;p&gt;$ dp[i][j] =  max(min(dp[i+1][j], dp[i][j+1])-dungeon[i][j], 1) $ (1)&lt;/p&gt;
&lt;p&gt;选择向右或者向下中代价最小的方向，然后根据当前要进入的房间(i,j)相应调整需要的血量。&lt;/p&gt;
&lt;p&gt;若$dungeon[i][j] &amp;lt;= 0$,则$dp[i][j] =  min(dp[i+1][j], dp[i][j+1])-dungeon[i][j]$ (2)&lt;/p&gt;
&lt;p&gt;若$dungeon[i][j] &amp;gt; 0$,则$dp[i][j] =  max(min(dp[i+1][j], dp[i][j+1])-dungeon[i][j], 1) $ (3) &lt;/p&gt;
&lt;p&gt;(2)、（3）式可以统一为（1）式子。&lt;/p&gt;
&lt;h1 id=&quot;c代码&quot;&gt;&lt;a href=&quot;#C-代码：&quot; class=&quot;headerlink&quot; title=&quot;C++代码：&quot;&gt;&lt;/a&gt;C++代码：&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Solution &amp;#123;&amp;#10;public:&amp;#10;    int calculateMinimumHP(vector&amp;#60;vector&amp;#60;int&amp;#62;&amp;#62;&amp;#38; dungeon) &amp;#123;&amp;#10;        int rows = dungeon.size();&amp;#10;        int cols = dungeon[0].size();&amp;#10;        vector&amp;#60;vector&amp;#60;int&amp;#62;&amp;#62; dp(rows, vector&amp;#60;int&amp;#62;(cols, 0));&amp;#10;        dp[rows-1][cols-1] = max(1-dungeon[rows-1][cols-1], 1);&amp;#10;        &amp;#10;        for (int i=rows-2; i&amp;#62;=0; i--) &amp;#123;&amp;#10;            dp[i][cols-1] =  max(dp[i+1][cols-1]-dungeon[i][cols-1], 1);&amp;#10;        &amp;#125;&amp;#10;        for (int j=cols-2; j&amp;#62;=0; j--) &amp;#123;&amp;#10;            dp[rows-1][j] =  max(dp[rows-1][j+1]-dungeon[rows-1][j], 1);&amp;#10;        &amp;#125;&amp;#10;        for (int i=rows-2; i&amp;#62;=0; i--) &amp;#123;&amp;#10;            for (int j=cols-2; j&amp;#62;=0; j--) &amp;#123;&amp;#10;                dp[i][j] =  max(min(dp[i+1][j], dp[i][j+1])-dungeon[i][j], 1);&amp;#10;            &amp;#125;&amp;#10;        &amp;#125;&amp;#10;        return dp[0][0];&amp;#10;    &amp;#125;&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="模板" scheme="http://stevechoris.github.io/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/tags/LeetCode/"/>
    
      <category term="模板" scheme="http://stevechoris.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>用Anaconda安装配置Jupyter Notebook和TensorFlow开发环境</title>
    <link href="http://stevechoris.github.io/2016/09/15/%E7%94%A8Anaconda%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEJupyter-Notebook%E5%92%8CTensorFlow%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://stevechoris.github.io/2016/09/15/用Anaconda安装配置Jupyter-Notebook和TensorFlow开发环境/</id>
    <published>2016-09-15T11:02:18.000Z</published>
    <updated>2017-03-30T13:21:14.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;emsp;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-anaconda安装&quot;&gt;&lt;a href=&quot;#1-Anaconda安装&quot; class=&quot;headerlink&quot; title=&quot;1. Anaconda安装&quot;&gt;&lt;/a&gt;1. Anaconda安装&lt;/h1&gt;&lt;p&gt;在&lt;a href=&quot;https://www.continuum.io/downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Anaconda官网&lt;/a&gt;下载并按照指令安装。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建议安装Python3版本，我在ubuntu14上测试发现安装Python2版本一直有&lt;a href=&quot;http://stackoverflow.com/questions/37232446/ipython-console-cant-locate-backports-shutil-get-terminal-size-and-wont-load&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IPython console can’t locate “backports.shutil_get_terminal_size” and won’t load&lt;/a&gt;的错误，按照stackoverflow上面的方法尝试也无法解决。之后看到有人评论说Python2目前已经过时了，于是重新安装了Python3版本的Anaconda后解决。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;2-tensorflow安装&quot;&gt;&lt;a href=&quot;#2-TensorFlow安装&quot; class=&quot;headerlink&quot; title=&quot;2. TensorFlow安装&quot;&gt;&lt;/a&gt;2. TensorFlow安装&lt;/h1&gt;&lt;h2 id=&quot;1-包管理&quot;&gt;&lt;a href=&quot;#1-包管理&quot; class=&quot;headerlink&quot; title=&quot;1. 包管理&quot;&gt;&lt;/a&gt;1. 包管理&lt;/h2&gt;&lt;p&gt;在Anaconda中可以使用&lt;a href=&quot;http://conda.pydata.org/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;conda&lt;/a&gt;或者&lt;a href=&quot;https://pypi.python.org/pypi/pip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pip&lt;/a&gt;进行包管理，可以查看&lt;a href=&quot;http://conda.pydata.org/docs/_downloads/conda-cheatsheet.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;conda常用命令&lt;/a&gt;和&lt;a href=&quot;http://dcjtech.info/wp-content/uploads/2015/10/Pip-Cheatsheet.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pip常用命令&lt;/a&gt;。conda可以看做是pip和virtualenv的集成，三者的常见命令对比可以查看&lt;a href=&quot;[conda vs. pip vs. virtualenv](&quot;&gt;conda vs. pip vs. virtualenv&lt;/a&gt;)。&lt;/p&gt;
&lt;h2 id=&quot;2-安装包命令网速慢解决方法&quot;&gt;&lt;a href=&quot;#2-安装包命令网速慢解决方法&quot; class=&quot;headerlink&quot; title=&quot;2. 安装包命令网速慢解决方法&quot;&gt;&lt;/a&gt;2. 安装包命令网速慢解决方法&lt;/h2&gt;&lt;h3 id=&quot;1-使用pip安装离线下载的whl格式安装包&quot;&gt;&lt;a href=&quot;#1-使用pip安装离线下载的whl格式安装包&quot; class=&quot;headerlink&quot; title=&quot;1. 使用pip安装离线下载的whl格式安装包&quot;&gt;&lt;/a&gt;1. 使用pip安装离线下载的whl格式安装包&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;可以从&lt;a href=&quot;https://pypi.python.org/pypi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PyPI Python安装包中心&lt;/a&gt;搜索并下载相应的按照包之后在本地离线安装。&lt;br&gt;&amp;emsp;&amp;emsp;例如，在下载名为&lt;a href=&quot;https://pypi.python.org/pypi/kivy.deps.gstreamer/0.1.9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kivy.deps.gstreamer&lt;/a&gt;的包kivy.deps.gstreamer-0.1.9-cp27-cp27m-win_amd64.whl，则安装命令为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install kivy.deps.gstreamer-0.1.9-cp27-cp27m-win_amd64.whl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-使用shadowsocksprivoxyproxychains-ng搭建局域网翻墙代理&quot;&gt;&lt;a href=&quot;#2-使用shadowsocks-privoxy-proxychains-ng搭建局域网翻墙代理&quot; class=&quot;headerlink&quot; title=&quot;2. 使用shadowsocks)+privoxy+proxychains-ng搭建局域网翻墙代理&quot;&gt;&lt;/a&gt;2. 使用&lt;strong&gt;&lt;a href=&quot;[shadowsocks](&quot;&gt;shadowsocks&lt;/a&gt;)&lt;/strong&gt;+&lt;strong&gt;&lt;a href=&quot;https://www.privoxy.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;privoxy&lt;/a&gt;&lt;/strong&gt;+&lt;strong&gt;&lt;a href=&quot;https://github.com/rofl0r/proxychains-ng&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;proxychains-ng&lt;/a&gt;&lt;/strong&gt;搭建局域网翻墙代理&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;这适用于服务器不适合直接搭建shadowsocks翻墙的情况，如果可以直接用shadowsocks翻墙，自然不需要这样做了。&lt;br&gt;&amp;emsp;&amp;emsp;我的情况是自己的Mac笔记本可以使用&lt;a href=&quot;https://greenss.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shadowsocks&lt;/a&gt;[以下简称SS]或者&lt;a href=&quot;https://ybb1024.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;鱼摆摆&lt;/a&gt;进行翻墙，而ubuntu服务器无法翻墙。因此，我在Mac上用SS或者鱼摆摆翻墙，然后用privoxy与之相连，在本地建立一个局域网http翻墙代理，最后在ubuntu服务器上使用proxychains-ng代理到Mac上实现翻墙来安装包。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体的配置可以参看下面两篇博客：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;实际上我在配置的过程中，用privoxy代理到鱼摆摆的本地http代理端口可以正常使用，但是代理到socks5端口就不行，具体原因不太清楚。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://inorz.net/2015/05/24/init-privoxy-to-centos/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;privoxy配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nenew.net/ubuntu-linux-proxychains.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;proxycahins-ng配置&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;3安装tensorflow&quot;&gt;&lt;a href=&quot;#3-安装TensorFlow&quot; class=&quot;headerlink&quot; title=&quot;3.安装TensorFlow&quot;&gt;&lt;/a&gt;3.安装TensorFlow&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;直接参考&lt;a href=&quot;https://www.tensorflow.org/get_started/os_setup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TensorFlow官网的安装教程即可&lt;/a&gt;， 注意显卡驱动，Cuda Toolkit以及cuDNN需要正确的配置。具体可以参考官网或者&lt;a href=&quot;https://github.com/saiprashanths/dl-setup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github上的深度学习框架搭建&lt;/a&gt;博客，其中包含了各种深度学习框架的搭建方法。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="开发环境和操作系统" scheme="http://stevechoris.github.io/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Anaconda" scheme="http://stevechoris.github.io/tags/Anaconda/"/>
    
      <category term="Conda" scheme="http://stevechoris.github.io/tags/Conda/"/>
    
      <category term="Python" scheme="http://stevechoris.github.io/tags/Python/"/>
    
      <category term="TensorFlow" scheme="http://stevechoris.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 32. Longest Valid Parentheses</title>
    <link href="http://stevechoris.github.io/2016/09/12/LeetCode-32-Longest-Valid-Parentheses/"/>
    <id>http://stevechoris.github.io/2016/09/12/LeetCode-32-Longest-Valid-Parentheses/</id>
    <published>2016-09-12T14:08:55.000Z</published>
    <updated>2017-03-30T13:19:36.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;emsp;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述:&quot;&gt;&lt;/a&gt;题目描述:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-valid-parentheses/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;32. Longest Valid Parentheses&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.&lt;/p&gt;
&lt;p&gt;For “(()”, the longest valid parentheses substring is “()”, which has length = 2.&lt;/p&gt;
&lt;p&gt;Another example is “)()())”, where the longest valid parentheses substring is “()()”, which has length = 4.&lt;/p&gt;
&lt;p&gt;Subscribe to see which companies asked this question&lt;/p&gt;
&lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h1&gt;&lt;p&gt;给定一个仅包含’(‘和’)’的字符串，找出最长有效括号匹配子串的长度。 对于”(()”, 最长的有效括号匹配子串为”()”,长度为2。&lt;/p&gt;
&lt;p&gt;另一个例子是”)()())”,最长的有效括号匹配子串为”()()”, 长度为4。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路：&quot; class=&quot;headerlink&quot; title=&quot;解题思路：&quot;&gt;&lt;/a&gt;解题思路：&lt;/h1&gt;&lt;h2 id=&quot;解法1-栈stack&quot;&gt;&lt;a href=&quot;#解法1-栈（Stack）&quot; class=&quot;headerlink&quot; title=&quot;解法1 栈（Stack）&quot;&gt;&lt;/a&gt;解法1 栈（Stack）&lt;/h2&gt;&lt;p&gt;引用&lt;a href=&quot;http://mp.weixin.qq.com/s?src=3&amp;amp;timestamp=1473686658&amp;amp;ver=1&amp;amp;signature=FjA7yVpEGqFGtSgxwobBBt3rKzs4TlAd6VhHAhJB1*RqJ-BuT23ywidQwlW-YhzgzqWrTVPKbvBiaQGL-lpBLOASbqi7kDUMiCMHKeDUKMwp6kXG1YXWdybs*xbOuh9SN4iWdD4g7xMz5Vlk613TBj1V-gb8oylIm2HxjjS8ZFo=&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;克林32. Longest Valid Parentheses&lt;/a&gt;的思路。&lt;br&gt;括号匹配经常会用到栈，当碰到做括号’(‘时，将字符压入栈中，当碰到’)’字符时查看栈顶元素，若栈顶元素为’(‘，则将栈顶元素弹出，否则栈为空或者栈顶元素为’)’，匹配失败，将其压入栈中。因此，最终遍历完整个字符串后栈中剩下的元素就是无法匹配的字符，而它们间隔开的就是所有括号有效匹配的字串。因此，在入栈的时候需要加入当前字符的索引，最后一次出栈的时候可以计算中间的间隔字符数量，最大的即是结果。&lt;/p&gt;
&lt;h2 id=&quot;c代码&quot;&gt;&lt;a href=&quot;#C-代码：&quot; class=&quot;headerlink&quot; title=&quot;C++代码：&quot;&gt;&lt;/a&gt;C++代码：&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;struct PT &amp;#123;&amp;#10;    char ch;&amp;#10;    int pos;&amp;#10;    PT(char ch_, int pos_):ch(ch_),pos(pos_)&amp;#123;&amp;#125;&amp;#10;&amp;#125;;&amp;#10;&amp;#10;class Solution &amp;#123;&amp;#10;public:&amp;#10;    int longestValidParentheses(string s) &amp;#123;&amp;#10;        if (s.empty()) return 0;&amp;#10;        stack&amp;#60;PT&amp;#62; sk;&amp;#10;        for (int i = 0; i &amp;#60; s.length(); i++) &amp;#123;&amp;#10;            int character = s[i];&amp;#10;            if (character == &amp;#39;(&amp;#39;) &amp;#123;&amp;#10;                sk.push(PT(&amp;#39;(&amp;#39;, i));&amp;#10;            &amp;#125; else &amp;#123;&amp;#10;                if (!sk.empty() &amp;#38;&amp;#38; sk.top().ch==&amp;#39;(&amp;#39;) &amp;#123;&amp;#10;                    sk.pop();&amp;#10;                &amp;#125; else &amp;#123;&amp;#10;                    sk.push(PT(&amp;#39;)&amp;#39;,i));&amp;#10;                &amp;#125;&amp;#10;            &amp;#125;&amp;#10;        &amp;#125;&amp;#10;        int ans = 0;&amp;#10;        int pre_pos = s.length();&amp;#10;        while (!sk.empty()) &amp;#123;&amp;#10;            int now_pos = sk.top().pos;&amp;#10;            sk.pop();&amp;#10;            ans = max(ans, pre_pos-now_pos - 1);&amp;#10;            pre_pos = now_pos;&amp;#10;        &amp;#125;&amp;#10;        ans = max(ans, pre_pos);&amp;#10;        return ans;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;解法2-动态规划dynamic-programming&quot;&gt;&lt;a href=&quot;#解法2-动态规划-Dynamic-Programming&quot; class=&quot;headerlink&quot; title=&quot;解法2 动态规划(Dynamic Programming)&quot;&gt;&lt;/a&gt;解法2 动态规划(Dynamic Programming)&lt;/h2&gt;&lt;p&gt;时间复杂度O(N),空间复杂度O(N)&lt;br&gt;参考&lt;a href=&quot;https://segmentfault.com/a/1190000003481194&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/a/1190000003481194&lt;/a&gt;的思路&lt;br&gt;还可以用动态规划的方法，状态dp[i]表示从下标i开始直到字符串结尾最长括号对长度，s[i]是字符串下标为i的括号。如果s[i]是左括号，而且i+d[i+1]+1是右括号的话，那么d[i] == d[i+1]+1，如果不是则为0。如果s[i]是右括号，因为没有右括号开头的括号对，因此d[i]=0。此外还需要加上dp[i+dp[i+1]+1+1)。&lt;/p&gt;
&lt;h2 id=&quot;c代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Solution &amp;#123;&amp;#10;    public int longestValidParentheses(String s) &amp;#123;&amp;#10;        int[] dp = new int[s.length()];&amp;#10;        int maxLen = 0;&amp;#10;        for(int i = s.length()-2; i &amp;#62;=0; i--)&amp;#123;&amp;#10;            if(s.charAt(i)==&amp;#39;(&amp;#39;)&amp;#123;&amp;#10;                int end = i + dp[i+1] + 1;&amp;#10;                if(end &amp;#60; s.length() &amp;#38;&amp;#38; s.charAt(end)==&amp;#39;)&amp;#39;)&amp;#123;&amp;#10;                    dp[i] = dp[i+1] + 2;&amp;#10;                    if(end + 1 &amp;#60; s.length())&amp;#123;&amp;#10;                        dp[i] += dp[end + 1];&amp;#10;                    &amp;#125;&amp;#10;                &amp;#125;&amp;#10;            &amp;#125;&amp;#10;            maxLen = Math.max(maxLen, dp[i]);&amp;#10;        &amp;#125;&amp;#10;        return maxLen;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/categories/LeetCode/"/>
    
    
      <category term="Dynamic Programming" scheme="http://stevechoris.github.io/tags/Dynamic-Programming/"/>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/tags/LeetCode/"/>
    
      <category term="Stack" scheme="http://stevechoris.github.io/tags/Stack/"/>
    
      <category term="String" scheme="http://stevechoris.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 312. Burst Balloons</title>
    <link href="http://stevechoris.github.io/2016/09/11/LeetCode-312-Burst-Balloons/"/>
    <id>http://stevechoris.github.io/2016/09/11/LeetCode-312-Burst-Balloons/</id>
    <published>2016-09-11T14:16:07.000Z</published>
    <updated>2017-03-30T13:20:50.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;emsp;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述:&quot;&gt;&lt;/a&gt;题目描述:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/burst-balloons/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;312. Burst Balloons&lt;/a&gt;&lt;br&gt;Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] &lt;em&gt; nums[i] &lt;/em&gt; nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.&lt;/p&gt;
&lt;p&gt;Find the maximum coins you can collect by bursting the balloons wisely.&lt;/p&gt;
&lt;h2 id=&quot;note&quot;&gt;&lt;a href=&quot;#Note&quot; class=&quot;headerlink&quot; title=&quot;Note:&quot;&gt;&lt;/a&gt;Note:&lt;/h2&gt;&lt;p&gt;(1) You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.&lt;br&gt;(2) 0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100&lt;/p&gt;
&lt;h2 id=&quot;example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example:&quot;&gt;&lt;/a&gt;Example:&lt;/h2&gt;&lt;p&gt;Given [3, 1, 5, 8]&lt;/p&gt;
&lt;p&gt;Return 167&lt;/p&gt;
&lt;p&gt;nums = [3,1,5,8] –&amp;gt; [3,5,8] –&amp;gt;   [3,8]   –&amp;gt;  [8]  –&amp;gt; []&lt;/p&gt;
&lt;p&gt;coins =  3 &lt;em&gt; 1 &lt;/em&gt; 5 +  3 &lt;em&gt; 5 &lt;/em&gt; 8 +  1 &lt;em&gt; 3 &lt;/em&gt; 8 + 1 &lt;em&gt; 8 &lt;/em&gt; 1 = 167&lt;/p&gt;
&lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h1&gt;&lt;p&gt;给定n个气球，下标为0到n-1。每个气球上都标有一个数字，用数组nums表示。你被要求扎破所有气球。扎破第i个气球可以获得nums[left] &lt;em&gt; nums[i] &lt;/em&gt; nums[right]枚硬币。这里left和right是与i相邻的下标。扎破气球以后，left和right就变成相邻的了。&lt;/p&gt;
&lt;p&gt;寻找最优策略下可以获得的硬币数。&lt;/p&gt;
&lt;h1 id=&quot;解题思路-动态规划dynamic-programming&quot;&gt;&lt;a href=&quot;#解题思路：-动态规划（Dynamic-Programming）&quot; class=&quot;headerlink&quot; title=&quot;解题思路： 动态规划（Dynamic Programming）&quot;&gt;&lt;/a&gt;解题思路： 动态规划（Dynamic Programming）&lt;/h1&gt;&lt;p&gt;时间复杂度O(N^3)&lt;br&gt;题目需要采用逆向思维，整个题目可以理解为将一个区间的的气球依次炸掉获得硬币，可以控制最后炸掉哪个气球。状态dp[l][r]表示需要爆炸的区间，以最后一个爆破的气球m为界限，可以把问题转换为左右两个区域的子问题。&lt;br&gt;状态转移方程：&lt;br&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-VpgrtD2IjWU/V9fzN8eYx-I/AAAAAAAAAQc/m4vTG8alOeA/I/14737694297670.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;dp[l][r]表示扎破（l,r)范围内所有气球获得的最大硬币数。 l与r的跨度k从2开始逐渐增大。&lt;/p&gt;
&lt;h1 id=&quot;c代码&quot;&gt;&lt;a href=&quot;#C-代码：&quot; class=&quot;headerlink&quot; title=&quot;C++代码：&quot;&gt;&lt;/a&gt;C++代码：&lt;/h1&gt;&lt;p&gt;java版代码引用&lt;a href=&quot;http://bookshadow.com/weblog/2015/11/30/leetcode-burst-balloons/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;书影博客[LeetCode]Burst Balloons &lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Solution &amp;#123;&amp;#10;public:&amp;#10;    int maxCoins(vector&amp;#60;int&amp;#62;&amp;#38; nums) &amp;#123;&amp;#10;        int sz = nums.size();&amp;#10;        vector&amp;#60;vector&amp;#60;int&amp;#62;&amp;#62; cnt(sz, vector&amp;#60;int&amp;#62;(sz, 0));&amp;#10;        return maxC(nums, 0, nums.size() - 1, 1, 1, cnt);&amp;#10;    &amp;#125;&amp;#10;    int maxC(vector&amp;#60;int&amp;#62;&amp;#38; nums, int from, int to, int left, int right, vector&amp;#60;vector&amp;#60;int&amp;#62;&amp;#62;&amp;#38; cnt) &amp;#123;&amp;#10;        if (from &amp;#62; to) return 0;&amp;#10;        if (cnt[from][to]) return cnt[from][to];&amp;#10;        if (from == to &amp;#38;&amp;#38; from &amp;#62;= 0 &amp;#38;&amp;#38; from &amp;#60; nums.size()) &amp;#123;&amp;#10;            cnt[from][to] = nums[from] * left * right;&amp;#10;            return nums[from] * left * right;&amp;#10;        &amp;#125;&amp;#10;        &amp;#10;        int max_num = -1;&amp;#10;        for (int i = from; i &amp;#60; nums.size() &amp;#38;&amp;#38; i &amp;#60;= to; i++) &amp;#123;&amp;#10;            max_num = max(max_num, maxC(nums, from, i-1, left, nums[i], cnt)&amp;#10;                + maxC(nums, i+1, to, nums[i], right, cnt) + nums[i] * left * right);&amp;#10;        &amp;#125;&amp;#10;        cnt[from][to] = max_num;&amp;#10;        return max_num;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;;&amp;#10;&amp;#10;public class Solution &amp;#123;&amp;#10;    public int maxCoins(int[] iNums) &amp;#123;&amp;#10;        int[] nums = new int[iNums.length + 2];&amp;#10;        int n = 1;&amp;#10;        for (int x : iNums) if (x &amp;#62; 0) nums[n++] = x;&amp;#10;        nums[0] = nums[n++] = 1;&amp;#10;&amp;#10;        int[][] dp = new int[n][n];&amp;#10;        for (int k = 2; k &amp;#60; n; ++k)&amp;#10;            for (int l = 0; l &amp;#60; n - k; ++l) &amp;#123;&amp;#10;                int r = l + k;&amp;#10;                for (int m = l + 1; m &amp;#60; r; ++m)&amp;#10;                    dp[l][r] = Math.max(dp[l][r], &amp;#10;                        nums[l] * nums[m] * nums[r] + dp[l][m] + dp[m][r]);&amp;#10;            &amp;#125;&amp;#10;    &amp;#10;        return dp[0][n - 1];&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/categories/LeetCode/"/>
    
    
      <category term="Dynamic Programming" scheme="http://stevechoris.github.io/tags/Dynamic-Programming/"/>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 354. Russian Doll Envelopes</title>
    <link href="http://stevechoris.github.io/2016/09/11/LeetCode-354-Russian-Doll-Envelopes/"/>
    <id>http://stevechoris.github.io/2016/09/11/LeetCode-354-Russian-Doll-Envelopes/</id>
    <published>2016-09-11T11:54:05.000Z</published>
    <updated>2017-03-30T13:20:18.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;emsp;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述:&quot;&gt;&lt;/a&gt;题目描述:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/russian-doll-envelopes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;354. Russian Doll Envelopes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You have a number of envelopes with widths and heights given as a pair of integers (w, h). One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.&lt;/p&gt;
&lt;p&gt;What is the maximum number of envelopes can you Russian doll? (put one inside other)&lt;/p&gt;
&lt;h2 id=&quot;example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example:&quot;&gt;&lt;/a&gt;Example:&lt;/h2&gt;&lt;p&gt;Given envelopes = [[5,4],[6,4],[6,7],[2,3]], the maximum number of envelopes you can Russian doll is 3 ([2,3] =&amp;gt; [5,4] =&amp;gt; [6,7]).&lt;/p&gt;
&lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h1&gt;&lt;p&gt;题意比较简单，给定一定量不同长宽的信封，小的信封可以放在大的信封内部，问最多能嵌套放几个。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路：&quot; class=&quot;headerlink&quot; title=&quot;解题思路：&quot;&gt;&lt;/a&gt;解题思路：&lt;/h1&gt;&lt;p&gt;首先将信封(w,h)按照按照宽度排序，宽度小的在宽度大的后面，若相等，则长度小的在前，这样排在后面的信封不可能包含在前面的信封之中。&lt;/p&gt;
&lt;p&gt;动态规划的思想也从中而来，状态DP[i]表示第i个信封所包含的信封的数量。从上面可知，若一个信封包含其他的信封(DP[i]&amp;gt;1)则，它包含的一定是排在它之前的某个信封，即状态转移方程为&lt;/p&gt;
&lt;p&gt;对每个信封i，初始化： $DP[i] = 1$ (1)&lt;br&gt;对于i&amp;gt;=2，&lt;img src=&quot;https://lh3.googleusercontent.com/-hMRCL5fA6zs/V9VTz0o8YhI/AAAAAAAAAPY/3Kquslplmm4/I/14735984062721.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;c代码&quot;&gt;&lt;a href=&quot;#C-代码：&quot; class=&quot;headerlink&quot; title=&quot;C++代码：&quot;&gt;&lt;/a&gt;C++代码：&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;struct cmp &amp;#123;&amp;#10;  bool operator()(pair&amp;#60;int,int&amp;#62;&amp;#38; a, pair&amp;#60;int,int&amp;#62;&amp;#38; b) &amp;#123;&amp;#10;      return b.first &amp;#60; a.first || (b.first==a.first &amp;#38;&amp;#38; b.second &amp;#60;a.second);&amp;#10;  &amp;#125;  &amp;#10;&amp;#125;;&amp;#10;class Solution &amp;#123;&amp;#10;public:&amp;#10;    int maxEnvelopes(vector&amp;#60;pair&amp;#60;int, int&amp;#62;&amp;#62;&amp;#38; envelopes) &amp;#123;&amp;#10;        sort(envelopes.begin(), envelopes.end());&amp;#10;        int n = envelopes.size();&amp;#10;        if (n &amp;#60;= 1) return n;&amp;#10;        &amp;#10;        int ans = INT_MIN;&amp;#10;        vector&amp;#60;int&amp;#62; dp(n, 1);&amp;#10;        vector&amp;#60;int&amp;#62; pre(n, -1);&amp;#10;        for (int i=1; i&amp;#60;n; i++) &amp;#123;&amp;#10;            for (int j=0; j&amp;#60;i; j++) &amp;#123;&amp;#10;                if (canContain(envelopes[i], envelopes[j]) &amp;#38;&amp;#38; dp[j]+1&amp;#62;dp[i]) &amp;#123;&amp;#10;                    dp[i] = dp[j]+1;&amp;#10;                    pre[i] = j;&amp;#10;                &amp;#125;&amp;#10;            &amp;#125;&amp;#10;        &amp;#125;&amp;#10;        &amp;#10;        for (int i=0; i&amp;#60;n; i++) &amp;#123;&amp;#10;            ans = max(ans, dp[i]);&amp;#10;        &amp;#125;&amp;#10;        return ans;&amp;#10;    &amp;#125;&amp;#10;    &amp;#10;    bool canContain(pair&amp;#60;int,int&amp;#62;&amp;#38; a, pair&amp;#60;int,int&amp;#62;&amp;#38; b) &amp;#123;&amp;#10;        return a.first &amp;#62; b.first &amp;#38;&amp;#38; a.second &amp;#62; b.second;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/categories/LeetCode/"/>
    
    
      <category term="Dynamic Programming" scheme="http://stevechoris.github.io/tags/Dynamic-Programming/"/>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 174. Dungeon Game</title>
    <link href="http://stevechoris.github.io/2016/09/11/LeetCode-174-Dungeon-Game/"/>
    <id>http://stevechoris.github.io/2016/09/11/LeetCode-174-Dungeon-Game/</id>
    <published>2016-09-11T10:00:53.000Z</published>
    <updated>2017-03-30T13:19:54.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;emsp;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述:&quot;&gt;&lt;/a&gt;题目描述:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/dungeon-game/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;174. Dungeon Game&lt;/a&gt;&lt;br&gt;The demons had captured the princess (&lt;em&gt;P&lt;/em&gt;) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (&lt;em&gt;K&lt;/em&gt;) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.&lt;/p&gt;
&lt;p&gt;The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.&lt;/p&gt;
&lt;p&gt;Some of the rooms are guarded by demons, so the knight loses health (negative integers) upon entering these rooms; other rooms are either empty (0’s) or contain magic orbs that increase the knight’s health (positive integers).&lt;/p&gt;
&lt;p&gt;In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Write a function to determine the knight’s minimum initial health so that he is able to rescue the princess.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path RIGHT-&amp;gt; RIGHT -&amp;gt; DOWN -&amp;gt; DOWN.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-OK3mhMH5MAI/V9VGGlpt63I/AAAAAAAAAO4/kfxbG2D6x0E/I/14735883347096.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;notes&quot;&gt;&lt;a href=&quot;#Notes&quot; class=&quot;headerlink&quot; title=&quot;Notes:&quot;&gt;&lt;/a&gt;Notes:&lt;/h2&gt;&lt;p&gt;The knight’s health has no upper bound.&lt;br&gt;Any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.&lt;/p&gt;
&lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h1&gt;&lt;p&gt;骑士需要从左上角开始进入房间，每次向右或向下移动一步进入下一个房间，直到到达右下角的房间救出公主。每个房间可能由精灵把守，会造成骑士失血，用负数表示；可能为空，用0表示；也可能有魔法球，可以给骑士补血。从左上角第一个房间开始，直到进入右下角关押公主的房间，血量都不能&amp;lt;=0。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路：&quot; class=&quot;headerlink&quot; title=&quot;解题思路：&quot;&gt;&lt;/a&gt;解题思路：&lt;/h1&gt;&lt;p&gt;这是一道二维的动态规划问题，用DP[i][j]表示状态，表示接下来骑士进入(i,j)房间后能救出公主最少需要具备多少血。状态转移方程为:&lt;/p&gt;
&lt;p&gt;$ dp[i][j] =  max(min(dp[i+1][j], dp[i][j+1])-dungeon[i][j], 1) $ (1)&lt;/p&gt;
&lt;p&gt;选择向右或者向下中代价最小的方向，然后根据当前要进入的房间(i,j)相应调整需要的血量。&lt;/p&gt;
&lt;p&gt;若$dungeon[i][j] &amp;lt;= 0$,则$dp[i][j] =  min(dp[i+1][j], dp[i][j+1])-dungeon[i][j]$ (2)&lt;/p&gt;
&lt;p&gt;若$dungeon[i][j] &amp;gt; 0$,则$dp[i][j] =  max(min(dp[i+1][j], dp[i][j+1])-dungeon[i][j], 1) $ (3) &lt;/p&gt;
&lt;p&gt;(2)、（3）式可以统一为（1）式子。&lt;/p&gt;
&lt;h1 id=&quot;c代码&quot;&gt;&lt;a href=&quot;#C-代码：&quot; class=&quot;headerlink&quot; title=&quot;C++代码：&quot;&gt;&lt;/a&gt;C++代码：&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Solution &amp;#123;&amp;#10;public:&amp;#10;    int calculateMinimumHP(vector&amp;#60;vector&amp;#60;int&amp;#62;&amp;#62;&amp;#38; dungeon) &amp;#123;&amp;#10;        int rows = dungeon.size();&amp;#10;        int cols = dungeon[0].size();&amp;#10;        vector&amp;#60;vector&amp;#60;int&amp;#62;&amp;#62; dp(rows, vector&amp;#60;int&amp;#62;(cols, 0));&amp;#10;        dp[rows-1][cols-1] = max(1-dungeon[rows-1][cols-1], 1);&amp;#10;        &amp;#10;        for (int i=rows-2; i&amp;#62;=0; i--) &amp;#123;&amp;#10;            dp[i][cols-1] =  max(dp[i+1][cols-1]-dungeon[i][cols-1], 1);&amp;#10;        &amp;#125;&amp;#10;        for (int j=cols-2; j&amp;#62;=0; j--) &amp;#123;&amp;#10;            dp[rows-1][j] =  max(dp[rows-1][j+1]-dungeon[rows-1][j], 1);&amp;#10;        &amp;#125;&amp;#10;        for (int i=rows-2; i&amp;#62;=0; i--) &amp;#123;&amp;#10;            for (int j=cols-2; j&amp;#62;=0; j--) &amp;#123;&amp;#10;                dp[i][j] =  max(min(dp[i+1][j], dp[i][j+1])-dungeon[i][j], 1);&amp;#10;            &amp;#125;&amp;#10;        &amp;#125;&amp;#10;        return dp[0][0];&amp;#10;    &amp;#125;&amp;#10;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/categories/LeetCode/"/>
    
    
      <category term="Dynamic Programming" scheme="http://stevechoris.github.io/tags/Dynamic-Programming/"/>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/tags/LeetCode/"/>
    
      <category term="Stack" scheme="http://stevechoris.github.io/tags/Stack/"/>
    
      <category term="String" scheme="http://stevechoris.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 解题报告</title>
    <link href="http://stevechoris.github.io/2016/09/10/LeetCode-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <id>http://stevechoris.github.io/2016/09/10/LeetCode-解题报告/</id>
    <published>2016-09-10T15:20:55.000Z</published>
    <updated>2017-03-30T13:21:08.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;emsp;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;解题报告&lt;/th&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;th&gt;难度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://stevechoris.github.io/2016/09/12/LeetCode-32-Longest-Valid-Parentheses/&quot;&gt;Longest Valid Parentheses&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://stevechoris.github.io/tags/Dynamic-Programming/&quot;&gt;Dynamic Programming&lt;/a&gt; &lt;a href=&quot;http://stevechoris.github.io/all-tags/#Stack-list&quot;&gt;Stack&lt;/a&gt; &lt;a href=&quot;http://stevechoris.github.io/all-tags/#String-list&quot;&gt;String&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Hard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://stevechoris.github.io/2016/09/11/LeetCode-174-Dungeon-Game/&quot;&gt;Dungeon Game&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://stevechoris.github.io/tags/Dynamic-Programming/&quot;&gt;Dynamic Programming&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Hard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;312&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://stevechoris.github.io/2016/09/11/LeetCode-312-Burst-Balloons/&quot;&gt;Burst Balloons&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://stevechoris.github.io/tags/Dynamic-Programming/&quot;&gt;Dynamic Programming&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Hard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;354&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://stevechoris.github.io/2016/09/11/LeetCode-354-Russian-Doll-Envelopes/&quot;&gt;Russian Doll Envelopes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://stevechoris.github.io/tags/Dynamic-Programming/&quot;&gt;Dynamic Programming&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Hard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;377&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://stevechoris.github.io/2016/09/10/LeetCode-377-Combination-Sum/&quot;&gt;Combination Sum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://stevechoris.github.io/tags/Dynamic-Programming/&quot;&gt;Dynamic Programming&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Medium&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>天使的模样</title>
    <link href="http://stevechoris.github.io/2016/09/10/Post-with-cover-image/"/>
    <id>http://stevechoris.github.io/2016/09/10/Post-with-cover-image/</id>
    <published>2016-09-10T13:29:21.000Z</published>
    <updated>2016-12-22T03:45:27.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;emsp;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;女孩的名叫海莉·福特，今年九岁，来自华盛顿州布雷默顿，与她小小的年龄不相称的是，她正举着钉枪，怀着大大的心意，在给流浪者建造庇护所。海莉说：“我觉得每个人都应该有一个住的地方，还有人无家可归，我得给他们建造房子。”目前，在妈妈和祖父的帮助下，海莉在社区里给无家可归的人们建造第一座木房子，希望能靠自己的努力来改变流浪汉们的生活。&lt;br&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/Zp-gyIPPyW3_di9qyWkpmuzZLdo9_YUA_oh5aRVfbo4RCee-UbamG1Zul0P5b5cG5-XWFoIoK28jSTw5P0lMx2XPql28_nkAnY_Z900j9_tqdCwAMuJdebhxH0czigPyQtF5W2B3IjVHzkZfUak_QhyG0CV1NQseOIcx67l0LlSXM4NJDI91V2NwH3nx1qw9TmxavquFNVrHgHSZDu2-Q40-3HVBihqXB0BJ7ZVPnA88rqY9wlhy4AeySCXk9wOmEdSaah2DXcapBqM0QITdFt6EqqxATk_QFH7p0vW4oUYapnHCBtjKJTLJAfptKgeCMsa7-LRavFTfaCiBRHlesBznzic-_x7QP9f38h7TBGJtEYbJ68T019NEA59od-hVxBCpLKBthEWSjTDL9R-nwkFLCqgVPtomK1HzcP46h5jcSWjmd5-SEnCT0BtnPArmOrK38vSa3bkl_PTwII-KZcKkPXJgBJ76ppBraBrTJJbdVTpMqcIP_8Abdic5sowMz4DN2CuMoppxlTOc9Y2KSFdOX29bHaVPQQOnMdmm7XIexDno1Rwj6rcoVNxr2wk3aah5bjzRdervHQNK6QN4qMG5sMbLKhCZNDhFgfjsgbFxKMBR=w520-h356-no&quot; alt=&quot;天使&quot;&gt;&lt;/p&gt;
&lt;p&gt;海莉为流浪汉们做公益已经有四年的时间了。那还是四年前，她她与妈妈米兰达逛完杂货铺出来，遇到了在当地丢失工作的流浪汉爱德华，他坐在路边，目光呆滞，已经很多天没吃饱饭了，饿得奄奄一息，五岁的海莉动了恻隐之心，跟妈妈商量着给爱德华买了个三明治。爱德华高兴得当场落泪，多年的流浪生涯让他看透了人情冷暖，世态的炎凉，而这个小女孩给了他温暖的一天。&lt;/p&gt;
&lt;p&gt;在街上，海莉又遇到了另一个流浪汉比利·雷，一个退伍军人，在战争中失去了双腿，无家可归的他再次激起了海莉的爱心。帮完了一个又一个流浪汉后，母亲告诉她：“我们并不是多么富裕，没有能力帮助所有的人。”小女孩的眼角挂着泪水，倔强地看着母亲，她没有绝望，任性地说：“不！我要试试看！”买不起食物，她就自己去种。&lt;/p&gt;
&lt;p&gt;就这样，这个善良的小女孩开始挖地，播种，除草，建栅栏，她要自己培育果蔬，为更多无家可归的人提供食物。没有种植经验，她就在晚上一个人抱着厚厚的书本学习，功夫不负有心人，她终于收获55磅的果蔬，悉数捐出，这可以满足流浪者一年的食量。如今，她的目标是收获250磅的食物，并通过自己动手，为流浪者建造庇护所，她拿起刀子，扛起电钻她要为流浪者建一个遮风避雨的小屋，带着口罩认真的粉刷墙壁。&lt;/p&gt;
&lt;p&gt;为了资助海莉的项目，妈妈米兰达向一家非营利性组织申请了一笔补助，海莉收到了3000美元的赠款。当地的一家建材商店劳氏商店承诺，海莉来采购建屋的材料能最低打五折。&lt;/p&gt;
&lt;p&gt;海莉的行动触动了一大批志愿者加入。一些爱心人士也纷纷伸出援助之手，给予海莉力所能及的帮助。一位女士，为那些女流浪者捐赠了女性用品，她将物品交给了海莉，并且告诉她“不够再来拿”。一家慈善机构知道海莉的故事后，给她捐了3000美元。她将这些钱用来购买一些生活用品，在一个圣诞节送给了流浪汉的孩子，“我看到了他们每个人都特别高兴，他们告诉我说我就是他们的圣诞老人。”&lt;/p&gt;
&lt;p&gt;海莉的善举，成为了一股推动改善流浪汉生活的力量。在海莉的影响下，有人开始捐钱，有人开始捐种子，更多的人开始关注身边的流浪者，他们和这些无家可归的人聊天，尽可能的帮助他们。“不应该有人在街头流浪，流浪者们需要更多人的帮助！”海莉的故事正在改变世界流浪汉的现状。&lt;/p&gt;
&lt;p&gt;尽自己最大的努力，怀揣一颗善良的心，去帮助那些需要帮助的人，这个世界就会因为你的小小善举而在慢慢发生改变。如果世界上真的有天使，那么天使应该就是这个女孩的模样。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="模板" scheme="http://stevechoris.github.io/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>[LeetCode] 377. Combination Sum</title>
    <link href="http://stevechoris.github.io/2016/09/10/LeetCode-377-Combination-Sum/"/>
    <id>http://stevechoris.github.io/2016/09/10/LeetCode-377-Combination-Sum/</id>
    <published>2016-09-10T08:33:28.000Z</published>
    <updated>2017-03-30T13:21:04.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;emsp;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述:&quot;&gt;&lt;/a&gt;题目描述:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/combination-sum-iv/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;377. Combination Sum IV&lt;/a&gt;&lt;br&gt;Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.&lt;/p&gt;
&lt;h2 id=&quot;example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example:&quot;&gt;&lt;/a&gt;Example:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;nums = [1, 2, 3]&lt;br&gt;target = 4&lt;/p&gt;
&lt;p&gt;The possible combination ways are:&lt;br&gt;(1, 1, 1, 1)&lt;br&gt;(1, 1, 2)&lt;br&gt;(1, 2, 1)&lt;br&gt;(1, 3)&lt;br&gt;(2, 1, 1)&lt;br&gt;(2, 2)&lt;br&gt;(3, 1)&lt;/p&gt;
&lt;p&gt;Note that different sequences are counted as different combinations.&lt;/p&gt;
&lt;p&gt;Therefore the output is 7.&lt;/p&gt;
&lt;h2 id=&quot;follow-up&quot;&gt;&lt;a href=&quot;#Follow-up&quot; class=&quot;headerlink&quot; title=&quot;Follow up:&quot;&gt;&lt;/a&gt;Follow up:&lt;/h2&gt;&lt;p&gt;What if negative numbers are allowed in the given array?&lt;br&gt;How does it change the problem?&lt;br&gt;What limitation we need to add to the question to allow negative numbers?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h1&gt;&lt;p&gt;给定一个无重复的正整数数组，计算得到一个目标正整数的所有可能组合方式的个数。&lt;/p&gt;
&lt;p&gt;测试用例见题目描述。&lt;/p&gt;
&lt;p&gt;注意不同的序列顺序应当视为不同的组合。&lt;/p&gt;
&lt;h2 id=&quot;进一步思考&quot;&gt;&lt;a href=&quot;#进一步思考：&quot; class=&quot;headerlink&quot; title=&quot;进一步思考：&quot;&gt;&lt;/a&gt;进一步思考：&lt;/h2&gt;&lt;p&gt;给定一个无重复的正整数数组，计算得到一个目标正整数的所有可能组合方式的个数。&lt;/p&gt;
&lt;p&gt;测试用例见题目描述。&lt;/p&gt;
&lt;p&gt;注意不同的序列顺序应当视为不同的组合。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路：&quot; class=&quot;headerlink&quot; title=&quot;解题思路：&quot;&gt;&lt;/a&gt;解题思路：&lt;/h1&gt;&lt;p&gt;动态规划（Dynamic Programming）&lt;/p&gt;
&lt;p&gt;状态转移方程：dp[x + y] += dp[x]&lt;/p&gt;
&lt;p&gt;其中dp[x]表示生成数字x的所有可能的组合方式的个数。&lt;/p&gt;
&lt;h1 id=&quot;python代码&quot;&gt;&lt;a href=&quot;#Python代码：&quot; class=&quot;headerlink&quot; title=&quot;Python代码：&quot;&gt;&lt;/a&gt;Python代码：&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Solution(object):&amp;#10;    def combinationSum4(self, nums, target):&amp;#10;        &amp;#34;&amp;#34;&amp;#34;&amp;#10;        :type nums: List[int]&amp;#10;        :type target: int&amp;#10;        :rtype: int&amp;#10;        &amp;#34;&amp;#34;&amp;#34;&amp;#10;        dp = [0] * (target + 1)&amp;#10;        dp[0] = 1&amp;#10;        for x in range(target + 1):&amp;#10;            for y in nums:&amp;#10;                if x + y &amp;#60;= target:&amp;#10;                    dp[x + y] += dp[x]&amp;#10;        return dp[target]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/categories/LeetCode/"/>
    
    
      <category term="Dynamic Programming" scheme="http://stevechoris.github.io/tags/Dynamic-Programming/"/>
    
      <category term="LeetCode" scheme="http://stevechoris.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>图片博客模板</title>
    <link href="http://stevechoris.github.io/2016/06/09/%E5%9B%BE%E7%89%87%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF/"/>
    <id>http://stevechoris.github.io/2016/06/09/图片博客模板/</id>
    <published>2016-06-09T05:33:36.000Z</published>
    <updated>2016-12-22T03:45:23.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-Q-mL0R4-5xE/V9PJW_JCQYI/AAAAAAAAAL8/elGdM3Wd92I/I/12577849%25252C2560%25252C1600.jpg&quot; alt=&quot;12577849,2560,1600&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-Q-mL0R4-5xE/V9PJW_JCQYI/AAAAAAAAAL8/elGdM3Wd92I/I/12577849%25252C2560%25252C1600.jpg&quot; alt=&quot;1
    
    </summary>
    
      <category term="模板" scheme="http://stevechoris.github.io/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="markdown" scheme="http://stevechoris.github.io/tags/markdown/"/>
    
      <category term="中文" scheme="http://stevechoris.github.io/tags/%E4%B8%AD%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Notebook 安装扩展插件</title>
    <link href="http://stevechoris.github.io/2016/05/29/Jupyter-Notebook-%E5%AE%89%E8%A3%85%E6%89%A9%E5%B1%95%E6%8F%92%E4%BB%B6/"/>
    <id>http://stevechoris.github.io/2016/05/29/Jupyter-Notebook-安装扩展插件/</id>
    <published>2016-05-29T07:54:37.000Z</published>
    <updated>2016-12-22T03:45:20.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;emsp;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-更新pip&quot;&gt;&lt;a href=&quot;#1-更新pip&quot; class=&quot;headerlink&quot; title=&quot;1. 更新pip&quot;&gt;&lt;/a&gt;1. 更新pip&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最简单的安装方法是使用pip，首先将pip更新到最新版&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install --upgrade pip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-安装jupyter-notebook-扩展&quot;&gt;&lt;a href=&quot;#2-安装Jupyter-Notebook-扩展&quot; class=&quot;headerlink&quot; title=&quot;2. 安装Jupyter Notebook 扩展&quot;&gt;&lt;/a&gt;2. 安装Jupyter Notebook 扩展&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;安装方法可以参考GitHub Jupyter Notebook主页上的&lt;a href=&quot;https://github.com/ipython-contrib/IPython-notebook-extensions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;README.md&lt;/a&gt;文档，最简单的方法是pip install&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install https://github.com/ipython-contrib/IPython-notebook-extensions/archive/master.zip --user&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-注意事项&quot;&gt;&lt;a href=&quot;#3-注意事项&quot; class=&quot;headerlink&quot; title=&quot;3. 注意事项&quot;&gt;&lt;/a&gt;3. 注意事项&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;网络不好的时候可以选择离线安装&lt;/li&gt;
&lt;li&gt;需要将anaconda目录添加读写权限&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;
    
    </summary>
    
      <category term="开发环境配置" scheme="http://stevechoris.github.io/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Python" scheme="http://stevechoris.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>文字博客模板</title>
    <link href="http://stevechoris.github.io/2016/05/25/%E6%96%87%E5%AD%97%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF/"/>
    <id>http://stevechoris.github.io/2016/05/25/文字博客模板/</id>
    <published>2016-05-25T15:26:46.000Z</published>
    <updated>2016-09-10T13:03:53.000Z</updated>
    
    <content type="html">&lt;p&gt;This is a test template&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This is a test template&lt;/p&gt;

    
    </summary>
    
      <category term="模板" scheme="http://stevechoris.github.io/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="markdown" scheme="http://stevechoris.github.io/tags/markdown/"/>
    
      <category term="中文" scheme="http://stevechoris.github.io/tags/%E4%B8%AD%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://stevechoris.github.io/2016/05/25/hello-world/"/>
    <id>http://stevechoris.github.io/2016/05/25/hello-world/</id>
    <published>2016-05-25T13:49:35.000Z</published>
    <updated>2016-05-25T13:49:35.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;http://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;quick-start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io
    
    </summary>
    
    
  </entry>
  
</feed>
